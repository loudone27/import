#!/bin/ksh
#========================================================================================#
#          -                                                                             #
#title           :solr_status_prd                                                        #
#description     :Activity Control Solr/zookeeper/memory/CPU/activity/injectors          #
#author          :Hertzog Ludovic                                                        #
#date            :16/04/2018                                                             #
#version         :7.24                                                                   #
#usage           :Must be run in ksh interpretor and Python is needed                    #
#notes           :Please advise Exparc team if you encounter any problem                 #
#========================================================================================#
###########################
#Raffraichissement ecran  #
###########################

clear

###########################
#Declaration des Variables#
###########################

USER_PROGRAM=$USER
APP_USER=was8
INJ_APP_USER=was7
CONS_APP_USER=was7
SUP_USER=root
MQ_APP_USER=mqm

ENV_PROG=Production
VERSION_PROG=7.24
APPLI=ELC_INJ

REPLAY_VERSION=eaas-replay-1.0.jar
LOG_REPLAY=/apps/eaas/rattrapage/log
FS_LOG_REPLAY=/apps
TMP_FOLDER=/dev/shm
DIR_PATH=$PWD
ACTUAL_HOST=$HOSTNAME

DIR_NAME=$(dirname $(readlink -f $0))
LOG_DIR=$DIR_NAME/log_status
NC_PATH=/usr/lib64/mindi/rootfs/usr/bin/nc
ZOO_PATH=/apps/eaas/zookeeper/conf

SERV_SOLR1=s00vl9925767     # SHARD 1 / SHARD 2
SERV_SOLR2=s00vl9925768     # SHARD 3 / SHARD 4
SERV_SOLR3=s00vl9925769     # SHARD 5 / SHARD 6
SERV_SOLR4=s00vl9925770     # SHARD 7 / SHARD 8
SERV_SOLR5=s00vl9925771     # SHARD 9 / SHARD 10
SERV_SOLR6=s00vl9925773     # SHARD 11 / SHARD 12
SERV_SOLR7=s00vl9925762     # SHARD 1 / SHARD 2
SERV_SOLR8=s00vl9925763     # SHARD 3 / SHARD 4
SERV_SOLR9=s00vl9925764     # SHARD 5 / SHARD 6
SERV_SOLR10=s00vl9925765    # SHARD 7 / SHARD 8
SERV_SOLR11=s00vl9925766    # SHARD 9 / SHARD 10
SERV_SOLR12=s00vl9925772    # SHARD 11 / SHARD 12

SERV_INDEX1=s00vl9925775
SERV_INDEX2=s00vl9925774

SERV_ZOO1=s00vl9925774
SERV_ZOO2=s00vl9925775
SERV_ZOO3=S00VL9926950
SERV_ZOO3_PID=S00VL9926950_PRA

SERV_INJEC1=parvl7820922    #SERVEUR DINJECTION 1
SERV_INJEC2=parvl7820926    #SERVEUR DINJECTION 2

SERV_ORACLE1=parcl7820045   #SERVEUR ORACLE RAC 1
SERV_ORACLE2=parcl7820046   #SERVEUR ORACLE RAC 2

EJB1_SERVINJECT1=elcprd101ejb    #EJB1 SERVEUR DINJECTION 1
EJB2_SERVINJECT1=elcprd201ejb    #EJB2 SERVEUR DINJECTION 1
WEB1_SERVINJECT1=elcprd101web    #WEB1 SERVEUR DINJECTION 1
WEB2_SERVINJECT1=elcprd201web    #WEB2 SERVEUR DINJECTION 1
WEB3_SERVINJECT1=elcprd103web    #WEB3 SERVEUR DINJECTION 1

EJB1_SERVINJECT2=elcprd102ejb    #EJB1 SERVEUR DINJECTION 2
EJB2_SERVINJECT2=elcprd202ejb    #EJB2 SERVEUR DINJECTION 2
WEB1_SERVINJECT2=elcprd102web    #WEB1 SERVEUR DINJECTION 2
WEB2_SERVINJECT2=elcprd202web    #WEB2 SERVEUR DINJECTION 2

#--------------------INJECTEUR MAF-------------------------------
EJB_MAF_SERVINJECT1=am2prd01ejb
EJB_MAF_SERVINJECT2=am2prd02ejb
#----------------------------------------------------------------

IHS_HTTPS_EJB1=https-elcprd101
IHS_HTTP_EJB1=http-elcprd101
IHS_HTTPS_EJB2=https-elcprd201
IHS_HTTP_EJB2=http-elcprd201
IHS2_HTTPS_EJB1=https-elcprd102
IHS2_HTTP_EJB1=http-elcprd102
IHS2_HTTPS_EJB2=https-elcprd202
IHS2_HTTP_EJB2=http-elcprd202

#-------------------------------FILE MQ ELE----------------------------------
MQR1_INJECT1=FREAS05P       #FILE MQ RECEPTION SERVEUR DINJECTION 1
MQR1_MAN_INJECT1=SCELCR01   #MQ MANAGER RECEPTION SERVEUR DINJECTION 1
MQE1_INJECT1=FREAS06P       #FILE MQ EMISSION SERVEUR DINJECTION 1
MQE1_MAN_INJECT1=SCELCE01   #MQ MANAGER EMISSION SERVEUR DINJECTION 1

MQR1_INJECT2=FREAS13P       #FILE MQ RECEPTION SERVEUR DINJECTION 2
MQR1_MAN_INJECT2=SCELCR01   #MQ MANAGER RECEPTION SERVEUR DINJECTION 2
MQE1_INJECT2=FREAS14P       #FILE MQ EMISSION SERVEUR DINJECTION 2
MQE1_MAN_INJECT2=SCELCE01   #MQ MANAGER EMISSION SERVEUR DINJECTION 2
#-----------------------------------------------------------------------------

#-------------------------------FILE MQ MAF----------------------------------
MQR1_INJECT3=FREAS15P       #FILE MQ RECEPTION SERVEUR DINJECTION 1
MQR1_MAN_INJECT3=SCELCM01   #MQ MANAGER RECEPTION SERVEUR DINJECTION 1

MQR1_INJECT4=FREAS16P       #FILE MQ RECEPTION SERVEUR DINJECTION 2
MQR1_MAN_INJECT4=SCELCM01   #MQ MANAGER RECEPTION SERVEUR DINJECTION 2
#-----------------------------------------------------------------------------

SERV_CONS1=parvl7822598     #SERVEUR DE CONSULTATION 1 / CLUSTER A
SERV_CONS2=parvl7822599     #SERVEUR DE CONSULTATION 2 / CLUSTER A
SERV_CONS3=parvl7822600     #SERVEUR DE CONSULTATION 3 / CLUSTER B
SERV_CONS4=parvl7822601     #SERVEUR DE CONSULTATION 4 / CLUSTER B

CLUSTER_A_NAME=scaprd01cl   #NOM CLUSTER A CONSULTATION
CLUSTER_B_NAME=scaprd02cl   #NOM CLUSTER B CONSULTATION

IHS_HTTP_CONS1=http-scaprd101
IHS_HTTPS_CONS1=https-scaprd101
IHS_HTTP_CONS2=http-scaprd102
IHS_HTTPS_CONS2=https-scaprd102
IHS_HTTP_CONS3=http-scaprd201
IHS_HTTPS_CONS3=https-scaprd201
IHS_HTTP_CONS4=http-scaprd202
IHS_HTTPS_CONS4=https-scaprd202

WEB1_SERVCONS1=scaprd101web
WEB2_SERVCONS1=scaprd102web
WEB1_SERVCONS2=scaprd103web
WEB2_SERVCONS2=scaprd104web
WEB1_SERVCONS3=scaprd201web
WEB2_SERVCONS3=scaprd202web
WEB1_SERVCONS4=scaprd203web
WEB2_SERVCONS4=scaprd204web

ORACLE_INSTANCE1=SCA2FRP1
ORACLE_INSTANCE2=SCA2FRP2

MQ_LIMIT=50
FS_LIMIT=80
JVM_LIMIT=90
ZOO_OUT_LIMIT=10

MQ_CUR_LIMIT_ELE=50000
COUNTER_SHOOT=100

FS_INJ1=('/apps/webservers7/elcprd101ejb' '/apps/webservers7/elcprd101ejb/delivery' '/apps/webservers7/elcprd101ejb/dumpDir' '/apps/webservers7/elcprd101ejb/logDir' '/apps/webservers7/elcprd101web' '/apps/webservers7/elcprd101web/delivery' '/apps/webservers7/elcprd101web/dumpDir' '/apps/webservers7/elcprd101web/logDir' '/apps/webservers7/elcprd103web' '/apps/webservers7/elcprd103web/delivery' '/apps/webservers7/elcprd103web/journal' '/apps/webservers7/elcprd103web/logDir' '/apps/webservers7/elcprd201ejb' '/apps/webservers7/elcprd201ejb/delivery' '/apps/webservers7/elcprd201ejb/dumpDir' '/apps/webservers7/elcprd201ejb/logDir' '/apps/webservers7/elcprd201web' '/apps/webservers7/elcprd201web/delivery' '/apps/webservers7/elcprd201web/dumpDir' '/apps/webservers7/elcprd201web/logDir' '/apps/WebSphere/profiles7/node' '/tmp')
FS_INJ2=('/apps/webservers7/elcprd102ejb' '/apps/webservers7/elcprd102ejb/delivery' '/apps/webservers7/elcprd102ejb/dumpDir' '/apps/webservers7/elcprd102ejb/logDir' '/apps/webservers7/elcprd102web' '/apps/webservers7/elcprd102web/delivery' '/apps/webservers7/elcprd102web/dumpDir' '/apps/webservers7/elcprd102web/logDir' '/apps/webservers7/elcprd202ejb' '/apps/webservers7/elcprd202ejb/delivery' '/apps/webservers7/elcprd202ejb/dumpDir' '/apps/webservers7/elcprd202ejb/logDir' '/apps/webservers7/elcprd202web' '/apps/webservers7/elcprd202web/delivery' '/apps/webservers7/elcprd202web/dumpDir' '/apps/webservers7/elcprd202web/logDir' '/apps/WebSphere/profiles7/node' '/tmp')
FS_CONS1=('/apps/webservers7/scaprd01cl/scaprd101web' '/apps/webservers7/scaprd01cl/scaprd101web/logDir' '/apps/webservers7/scaprd01cl/scaprd102web' '/apps/webservers7/scaprd01cl/scaprd102web/tranlog' '/apps/webservers7/scaprd01cl/scaprd102web/logDir' '/tmp')
FS_CONS2=('/apps/webservers7/scaprd01cl/scaprd103web' '/apps/webservers7/scaprd01cl/scaprd103web/tranlog' '/apps/webservers7/scaprd01cl/scaprd103web/logDir' '/apps/webservers7/scaprd01cl/scaprd104web' '/apps/webservers7/scaprd01cl/scaprd104web/tranlog' '/apps/webservers7/scaprd01cl/scaprd104web/logDir' '/tmp')
FS_CONS3=('/apps/webservers7/scaprd02cl/scaprd201web' '/apps/webservers7/scaprd02cl/scaprd201web/tranlog' '/apps/webservers7/scaprd02cl/scaprd201web/logDir' '/apps/webservers7/scaprd02cl/scaprd202web' '/apps/webservers7/scaprd02cl/scaprd202web/tranlog' '/apps/webservers7/scaprd02cl/scaprd202web/logDir' '/tmp')
FS_CONS4=('/apps/webservers7/scaprd02cl/scaprd203web' '/apps/webservers7/scaprd02cl/scaprd203web/tranlog' '/apps/webservers7/scaprd02cl/scaprd203web/logDir' '/apps/webservers7/scaprd02cl/scaprd204web' '/apps/webservers7/scaprd02cl/scaprd204web/tranlog' '/apps/webservers7/scaprd02cl/scaprd204web/logDir' '/tmp')
FS_INDEX1=('/apps/WebSphere/profiles8/node' '/apps/WebSphere/profiles8/logs/node' '/apps/IBMHTTPServer/WebServer8' '/apps/webservers8/eaas' '/apps/webservers8/eaas/indexer1' '/apps/webservers8/eaas/indexer1/logs' '/apps/eaas/zookeeper' '/apps/eaas/zookeeper/log' '/apps/eaas/rattrapage/log' '/apps/webservers8/javacore' '/tmp')
FS_INDEX2=('/apps/WebSphere/profiles8/node' '/apps/WebSphere/profiles8/logs/node' '/apps/IBMHTTPServer/WebServer8' '/apps/webservers8/eaas' '/apps/webservers8/eaas/indexer2' '/apps/webservers8/eaas/indexer2/logs' '/apps/eaas/zookeeper' '/apps/eaas/zookeeper/log' '/apps/webservers8/javacore' '/tmp')

INJ1_PATH_LOG_01=/apps/webservers7/$EJB1_SERVINJECT1/logDir
INJ1_PATH_LOG_02=/apps/webservers7/$EJB2_SERVINJECT1/logDir
INJ2_PATH_LOG_01=/apps/webservers7/$EJB1_SERVINJECT2/logDir
INJ2_PATH_LOG_02=/apps/webservers7/$EJB2_SERVINJECT2/logDir

LOG_PATH=/dev/shm/

#--------------------FILE MQ ELE-------------------------------
MQ_LOG_PATH_01=/dev/shm/FREAS05P.count
MQ_LOG_PATH_02=/dev/shm/FREAS13P.count
#--------------------------------------------------------------

#--------------------FILE MQ MAF-------------------------------
MQ_LOG_PATH_03=/dev/shm/FREAS15P.count
MQ_LOG_PATH_04=/dev/shm/FREAS16P.count
#--------------------------------------------------------------

CONS1_PATH_LOG_01=/apps/webservers7/$CLUSTER_A_NAME/$WEB1_SERVCONS1/logDir
CONS1_PATH_LOG_02=/apps/webservers7/$CLUSTER_A_NAME/$WEB2_SERVCONS1/logDir
CONS2_PATH_LOG_01=/apps/webservers7/$CLUSTER_A_NAME/$WEB1_SERVCONS2/logDir
CONS2_PATH_LOG_02=/apps/webservers7/$CLUSTER_A_NAME/$WEB2_SERVCONS2/logDir
CONS3_PATH_LOG_01=/apps/webservers7/$CLUSTER_B_NAME/$WEB1_SERVCONS3/logDir
CONS3_PATH_LOG_02=/apps/webservers7/$CLUSTER_B_NAME/$WEB2_SERVCONS3/logDir
CONS4_PATH_LOG_01=/apps/webservers7/$CLUSTER_B_NAME/$WEB1_SERVCONS4/logDir
CONS4_PATH_LOG_02=/apps/webservers7/$CLUSTER_B_NAME/$WEB2_SERVCONS4/logDir

MEM_LIMIT=5 # VALEUR EN MB
MEM_SWAP_LIMIT=90
CPU_USAG_LIMIT=95
NUM_RUN=20
NUM_RUN_C=10
RETRYCOUNT=1

###########################
# COLORS DEFINITION        
###########################

ROUGE="\\033[1;31m"            # KO
ROUGE_SOU="\033[04;01;31m"    # STATUS CORE SOLR RECOVERING FAILED
ROUGE_SUR="\\033[41;38m"    # STATUS CORE SOLR RECOVERING FAILED
JAUNE="\\033[1;33m"            # CASES INFORMATIONS
JAUNE_SOU="\\033[04;01;33m" # STATUS CORE SOLR RECOVERING
JAUNE_SUR="\\033[43;30m"    # STATUS CORE SOLR RECOVERING
VIOLET="\\033[1;35m"        # INFORMATIONS STATUS
VERT="\\033[1;32m"            # OK / DATE
VERT_SOU="\\033[04;01;32m"  # STATUS CORE SOLR ACTIVE
VERT_SUR="\\033[42;30m"     # STATUS CORE SOLR ACTIVE
CYAN="\\033[1;36m"            # SERVER NAME
NORMAL="\\033[0;39m"        # DEFAULT COLOR
BLACK_SOU="\\033[04;01;30m" # STATUS CORE SOLR GONE
WHITE_SUR="\\033[47;30m"    # STATUS CORE SOLR GONE
BLUE="\\033[1;34m"          # TITRE SOLR STATUS


#############################
#Control de lancement du SH #
#############################

if [ 1 -lt "$#" ]; then
    PARAMS=`echo $@|cut -f "2 3 4 5 6 7 8 9" -d " "`
fi

checkUser() {
        ID=`id |cut -d"(" -f2 |cut -d")" -f1`
        if [ "$ID" != "$1" ]; then
                echo "Le script doit etre lance avec l utilisateur $1"
                echo "Connectez-vous avec $1 puis relancer la commande"
                exit 1
        fi
}

###################################
# GESTION DE DATE & HEURE         #
###################################

MONTH=`date +%m`
YEAR=`date | awk '{print $6 }'`
DAY=`date | awk '{print $3 }'`
HOUR=`date | awk '{print $4 }'`
FULL_DATE=`date | awk '{print "le "$3" "$2" "$6" a "$4}'`
LOG_DATE=`date +"%b-%d-%y"`

#####################################
# DEFINITION DATE JOUR SUR 2 DIGITS #
#####################################

if [ $DAY -lt 10 ]
then
    DAY="0"$DAY
fi


#################################################
# DEFINITION DATE FOR FINDIND LOGS CONSULTATION #
#################################################
TODAY=$(date | awk -F" " '{print $2 " " $3}')
YESTERDAY=$(date --date="1 days ago" | awk -F" " '{print $2 " " $3}')

today=$(date '+%d/%h/%Y')
yesterday=$(date --date="1 days ago" '+%d/%h/%Y')

#################################################################
# DEFINITION DATE FOR FINDIND LOGS INJECTIONS CALCUL AND DISPLAY#
#################################################################

today_inj=`date '+%Y-%m-%d'`
yesterday_inj=`date --date="1 days ago" '+%Y-%m-%d'`
day2_inj=`date --date="2 days ago" '+%Y-%m-%d'`
day3_inj=`date --date="3 days ago" '+%Y-%m-%d'`

today_inj_dis=`date | awk '{print "le "$3" "$2" "$6}'`
yesterday_inj_dis=`date --date="1 days ago" | awk '{print "le "$3" "$2" "$6}'`
day2_inj_dis=`date --date="2 days ago" | awk '{print "le "$3" "$2" "$6}'`
day3_inj_dis=`date --date="3 days ago" | awk '{print "le "$3" "$2" "$6}'`


###################################
# STATUS $ PID $ DATE INDEXER 1   #
###################################

getINDEXER1Status() {

        ssh -q $SERV_INDEX1 ps -eo pid,user,command,args | grep as_$SERV_INDEX1_indexer1 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q ${SERV_INDEX1} ps -eo pid,user,command,args | grep as_${SERV_INDEX1}_indexer1 | grep -v IBMHTTPServer | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INDEX1 ps -eo pid,start | grep -w $ID1)
            INDEXER1_STATUS=1
            
        fi
        
        ssh -q $SERV_INDEX1 ps -fu was8 | grep as_$SERV_INDEX1_indexer1 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "----------------------------------${JAUNE}INDEXER 1${NORMAL}------------------------------------------------"
                        echo -e "INDEXER 1 on ${CYAN}${SERV_INDEX1}${NORMAL}       : ${VERT}UP${NORMAL}    ||    Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                INDEXER1_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "----------------------------------${JAUNE}INDEXER 1${NORMAL}------------------------------------------------"
                        echo -e "INDEXER 1 on ${CYAN}${SERV_INDEX1}${NORMAL}       : ${ROUGE}DOWN${NORMAL}"
                fi
                INDEXER1_STATUS=0
        fi

        IHS1=$(ssh -q $SERV_INDEX1 ps -eo pid,user,command,args | grep $SUP_USER | grep indexer1 | grep -w IBMHTTPServer | grep -v grep | head -1)
        if [ "$IHS1" != "" ]; then
            ID1=$(ssh -q ${SERV_INDEX1} ps -eo pid,user,command,args | grep ${SUP_USER} | grep indexer1 | grep -w IBMHTTPServer | grep -v grep | head -1 | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INDEX1 ps -eo pid,start | grep -w $ID1)
            IHS_INDEXER1_STATUS=1
            
        fi

        IHS1=$(ssh -q $SERV_INDEX1 ps -fu $SUP_USER | grep indexer1 | grep -w IBMHTTPServer | grep -v grep | head -1)
        if [ "$IHS1" != "" ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS INDEXER 1 on ${CYAN}${SERV_INDEX1}${NORMAL}   : ${VERT}UP${NORMAL}    ||    Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                IHS_INDEXER1_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS INDEXER 1 on ${CYAN}${SERV_INDEX1}${NORMAL}   : ${ROUGE}DOWN${NORMAL}"
                fi
                IHS_INDEXER1_STATUS=0
        fi

#-------------------------------------------------------
# verification Process Module de rattrapage
#-------------------------------------------------------

        ssh -q $SERV_INDEX1 ps -eo pid,user,command,args | grep rattrapage.jar | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q ${SERV_INDEX1} ps -eo pid,user,command,args | grep rattrapage.jar | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INDEX1 ps -eo pid,start | grep -w $ID1)
            RATTRAPAGE_STATUS=1
            
        fi
        
        ssh -q $SERV_INDEX1 ps -fu was8 | grep rattrapage.jar | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "-----------------------------${JAUNE}MODULE DE RATTRAPAGE${NORMAL}------------------------------------------"
                        echo -e "MODULE INDEX on ${CYAN}${SERV_INDEX1}${NORMAL}    : ${VERT}UP${NORMAL}    ||    Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                RATTRAPAGE_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "-----------------------------${JAUNE}MODULE DE RATTRAPAGE${NORMAL}------------------------------------------"
                        echo -e "MODULE INDEX on ${CYAN}${SERV_INDEX1}${NORMAL}    : ${ROUGE}DOWN${NORMAL}"
                fi
                RATTRAPAGE_STATUS=0
        fi

#-------------------------------------------------------
# verification Process Module eaas Replay
#-------------------------------------------------------

        ssh -q $SERV_INDEX1 ps -eo pid,user,command,args | grep $REPLAY_VERSION | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q ${SERV_INDEX1} ps -eo pid,user,command,args | grep ${REPLAY_VERSION} | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INDEX1 ps -eo pid,start | grep -w $ID1)
            REPLAY_STATUS=1
            
        fi
        
        ssh -q $SERV_INDEX1 ps -fu was8 | grep $REPLAY_VERSION | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "-------------------------------${JAUNE}MODULE REPLAY${NORMAL}----------------------------------------------"
                        echo -e "MODULE REPLAY on ${CYAN}${SERV_INDEX1}${NORMAL}   : ${VERT}UP${NORMAL}    ||    Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                REPLAY_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "-------------------------------${JAUNE}MODULE DE REPLAY${NORMAL}--------------------------------------------"
                        echo -e "MODULE REPLAY on ${CYAN}${SERV_INDEX1}${NORMAL}   : ${ROUGE}DOWN${NORMAL}"
                fi
                REPLAY_STATUS=0
        fi
}


###################################
# STATUS $ PID $ DATE INDEXER 2   #
###################################

getINDEXER2Status() {

        ssh -q $SERV_INDEX2 ps -eo pid,user,command,args | grep as_$SERV_INDEX2_indexer2 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q ${SERV_INDEX2} ps -eo pid,user,command,args | grep as_$SERV_INDEX2_indexer2 | grep -v IBMHTTPServer | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INDEX2 ps -eo pid,start | grep -w $ID1)
            INDEXER2_STATUS=1
            
        fi
        
        ssh -q $SERV_INDEX2 ps -fu was8 | grep as_$SERV_INDEX1_indexer2 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "----------------------------------${JAUNE}INDEXER 2${NORMAL}------------------------------------------------"
                        echo -e "INDEXER 2 on ${CYAN}${SERV_INDEX2}${NORMAL}       : ${VERT}UP${NORMAL}    ||    Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                INDEXER2_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "----------------------------------${JAUNE}INDEXER 2${NORMAL}------------------------------------------------"
                        echo -e "INDEXER 2 on ${CYAN}${SERV_INDEX2}${NORMAL}       : ${ROUGE}DOWN${NORMAL}"
                fi
                INDEXER2_STATUS=0
        fi

        IHS1=$(ssh -q $SERV_INDEX2 ps -eo pid,user,command,args | grep $SUP_USER | grep indexer2 | grep -w IBMHTTPServer | grep -v grep | head -1)
        if [ "$IHS1" != "" ]; then
            ID1=$(ssh -q ${SERV_INDEX2} ps -eo pid,user,command,args | grep ${SUP_USER} | grep indexer2 | grep -w IBMHTTPServer | grep -v grep | head -1 | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INDEX2 ps -eo pid,start | grep -w $ID1)
            IHS_INDEXER2_STATUS=1
            
        fi

        IHS1=$(ssh -q $SERV_INDEX2 ps -fu $SUP_USER | grep indexer2 | grep -w IBMHTTPServer | grep -v grep | head -1)
        if [ "$IHS1" != "" ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS INDEXER 2 on ${CYAN}${SERV_INDEX2}${NORMAL}   : ${VERT}UP${NORMAL}    ||    Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                IHS_INDEXER2_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS INDEXER 2 on ${CYAN}${SERV_INDEX2}${NORMAL}   : ${ROUGE}DOWN${NORMAL}"
                fi
                IHS_INDEXER2_STATUS=0
        fi

}


#####################################
# STATUS $ PID $ DATE INJECTOR 1    #
#####################################

getINJECTOR1Status() {

        ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep -w $EJB1_SERVINJECT1 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep -w $EJB1_SERVINJECT1 | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INJEC1 ps -eo pid,start | grep -w $ID1)
            INJECT1_STATUS=1
            
        fi
        
        ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep -w $EJB1_SERVINJECT1 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "---------------------------------------${JAUNE}INJECTOR 1${NORMAL}-------------------------------------------"
                        echo -e "EJB ${JAUNE}${EJB1_SERVINJECT1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}      : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                INJECT1_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "---------------------------------------${JAUNE}INJECTOR 1${NORMAL}-------------------------------------------"
                        echo -e "EJB ${JAUNE}${EJB1_SERVINJECT1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}      : ${ROUGE}DOWN${NORMAL}"
                fi
                INJECT1_STATUS=0
        fi

        IHS1=$(ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTP_EJB1 | grep -v grep | head -1)
        if [ "$IHS1" != "" ]; then
            ID2=$(ssh -q ${SERV_INJEC1} ps -eo pid,user,command,args | grep ${SUP_USER} | grep ${IHS_HTTP_EJB1} | grep -v grep | head -1 | awk -F" " '{print $1}')
            DATE2=$(ssh -q $SERV_INJEC1 ps -eo pid,start | grep -w $ID2)
            IHS_HTTP_EJB1_STATUS=1
            
        fi

        IHS1=$(ssh -q $SERV_INJEC1 ps -fu $SUP_USER | grep $IHS_HTTP_EJB1 | grep -v grep | head -1)
        if [ "$IHS1" != "" ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTP_EJB1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}    : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE2}${NORMAL} "
                fi
                IHS_HTTP_EJB1_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTP_EJB1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}    : ${ROUGE}DOWN${NORMAL}"
                fi
                IHS_HTTP_EJB1_STATUS=0
        fi

        IHSS1=$(ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTPS_EJB1 | grep -v grep | head -1)
        if [ "$IHSS1" != "" ]; then
            ID3=$(ssh -q ${SERV_INJEC1} ps -eo pid,user,command,args | grep ${SUP_USER} | grep ${IHS_HTTPS_EJB1} | grep -v grep | head -1 | awk -F" " '{print $1}')
            DATE3=$(ssh -q $SERV_INJEC1 ps -eo pid,start | grep -w $ID3)
            IHS_HTTPS_EJB1_STATUS=1
            
        fi

        IHSS1=$(ssh -q $SERV_INJEC1 ps -fu $SUP_USER | grep $IHS_HTTPS_EJB1 | grep -v grep | head -1)
        if [ "$IHSS1" != "" ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTPS_EJB1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}   : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE3}${NORMAL} "
                fi
                IHS_HTTPS_EJB1_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTPS_EJB1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}   : ${ROUGE}DOWN${NORMAL}"
                fi
                IHS_HTTPS_EJB1_STATUS=0
        fi

########################################################################################################################################################################################################
        echo ""
########################################################################################################################################################################################################

        ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep -w $EJB2_SERVINJECT1 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep -w $EJB2_SERVINJECT1 | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INJEC1 ps -eo pid,start | grep -w $ID1)
            INJECT2_STATUS=1
            
        fi
        
        ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep -w $EJB2_SERVINJECT1 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "EJB ${JAUNE}${EJB2_SERVINJECT1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}      : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                INJECT2_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "EJB ${JAUNE}${EJB2_SERVINJECT1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}      : ${ROUGE}DOWN${NORMAL}"
                fi
                INJECT2_STATUS=0
        fi

        IHS2=$(ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTP_EJB2 | grep -v grep | head -1)
        if [ "$IHS2" != "" ]; then
            ID2=$(ssh -q ${SERV_INJEC1} ps -eo pid,user,command,args | grep ${SUP_USER} | grep ${IHS_HTTP_EJB2} | grep -v grep | head -1 | awk -F" " '{print $1}')
            DATE2=$(ssh -q $SERV_INJEC1 ps -eo pid,start | grep -w $ID2)
            IHS_HTTP_EJB2_STATUS=1
            
        fi

        IHS2=$(ssh -q $SERV_INJEC1 ps -fu $SUP_USER | grep $IHS_HTTP_EJB2 | grep -v grep | head -1)
        if [ "$IHS2" != "" ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTP_EJB2}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}    : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE2}${NORMAL} "
                fi
                IHS_HTTP_EJB2_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTP_EJB2}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}    : ${ROUGE}DOWN${NORMAL}"
                fi
                IHS_HTTP_EJB2_STATUS=0
        fi

        IHSS2=$(ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTPS_EJB2 | grep -v grep | head -1)
        if [ "$IHSS2" != "" ]; then
            ID2=$(ssh -q ${SERV_INJEC1} ps -eo pid,user,command,args | grep ${SUP_USER} | grep ${IHS_HTTPS_EJB2} | grep -v grep | head -1 | awk -F" " '{print $1}')
            DATE2=$(ssh -q $SERV_INJEC1 ps -eo pid,start | grep -w $ID2)
            IHS_HTTPS_EJB2_STATUS=1
            
        fi

        IHSS2=$(ssh -q $SERV_INJEC1 ps -fu $SUP_USER | grep $IHS_HTTPS_EJB2 | grep -v grep | head -1)
        if [ "$IHSS2" != "" ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTPS_EJB2}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}   : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE2}${NORMAL} "
                fi
                IHS_HTTPS_EJB2_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTPS_EJB2}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}   : ${ROUGE}DOWN${NORMAL}"
                fi
                IHS_HTTPS_EJB2_STATUS=0
        fi

########################################################################################################################################################################################################
        echo ""
########################################################################################################################################################################################################

        ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep $INJ_APP_USER | grep -w $WEB1_SERVINJECT1 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep $INJ_APP_USER | grep -w $WEB1_SERVINJECT1 | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INJEC1 ps -eo pid,start | grep -w $ID1)
            INJECT3_STATUS=1
            
        fi
        
        ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep $INJ_APP_USER | grep -w $WEB1_SERVINJECT1 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "WEB ${JAUNE}${WEB1_SERVINJECT1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}      : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                INJECT3_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "WEB ${JAUNE}${WEB1_SERVINJECT1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}      : ${ROUGE}DOWN${NORMAL}"
                fi
                INJECT3_STATUS=0
        fi

        ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep $INJ_APP_USER | grep -w $WEB2_SERVINJECT1 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep $INJ_APP_USER | grep -w $WEB2_SERVINJECT1 | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INJEC1 ps -eo pid,start | grep -w $ID1)
            INJECT3_STATUS=1
            
        fi
        
        ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep $INJ_APP_USER | grep -w $WEB2_SERVINJECT1 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "WEB ${JAUNE}${WEB2_SERVINJECT1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}      : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                INJECT3_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "WEB ${JAUNE}${WEB2_SERVINJECT1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}      : ${ROUGE}DOWN${NORMAL}"
                fi
                INJECT3_STATUS=0
        fi

        ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep $INJ_APP_USER | grep -w $WEB3_SERVINJECT1 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep $INJ_APP_USER | grep -w $WEB3_SERVINJECT1 | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INJEC1 ps -eo pid,start | grep -w $ID1)
            INJECT3_STATUS=1
            
        fi
        
        ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep $INJ_APP_USER | grep -w $WEB3_SERVINJECT1 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "WEB ${JAUNE}${WEB3_SERVINJECT1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}      : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                INJECT3_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "WEB ${JAUNE}${WEB3_SERVINJECT1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}      : ${ROUGE}DOWN${NORMAL}"
                fi
                INJECT3_STATUS=0
        fi

########################################################################################################################################################################################################
        echo ""
########################################################################################################################################################################################################

}


########################################
# STATUS $ PID $ DATE MQ INJECTOR 1    #
########################################

getMQ_INJECTOR1Status() {

        ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep $MQ_APP_USER | grep -w $MQR1_INJECT1 | grep SYSTEM.CHANNEL | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep $MQ_APP_USER | grep -w $MQR1_INJECT1 | grep SYSTEM.CHANNEL | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INJEC1 ps -eo pid,start | grep -w $ID1)
            MQR1_STATUS=1
            
        fi
        
        ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep $MQ_APP_USER | grep -w $MQR1_INJECT1 | grep SYSTEM.CHANNEL | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "MQ ${JAUNE}${MQR1_MAN_INJECT1}${NORMAL}/${JAUNE}${MQR1_INJECT1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}  : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                MQR1_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "MQ ${JAUNE}${MQR1_MAN_INJECT1}${NORMAL}/${JAUNE}${MQR1_INJECT1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}  : ${ROUGE}DOWN${NORMAL}"
                fi
                MQR1_STATUS=0
        fi

        ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep $MQ_APP_USER | grep -w $MQE1_INJECT1 | grep SYSTEM.CHANNEL | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID2=$(ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep $MQ_APP_USER | grep -w $MQE1_INJECT1 | grep SYSTEM.CHANNEL | grep -v grep | awk -F" " '{print $1}')
            DATE2=$(ssh -q $SERV_INJEC1 ps -eo pid,start | grep -w $ID2)
            MQR2_STATUS=1
            
        fi
        
        ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep $MQ_APP_USER | grep -w $MQE1_INJECT1 | grep SYSTEM.CHANNEL | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "MQ ${JAUNE}${MQE1_MAN_INJECT1}${NORMAL}/${JAUNE}${MQE1_INJECT1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}  : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE2}${NORMAL} "
                fi
                MQR2_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "MQ ${JAUNE}${MQE1_MAN_INJECT1}${NORMAL}/${JAUNE}${MQE1_INJECT1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}  : ${ROUGE}DOWN${NORMAL}"
                fi
                MQR2_STATUS=0
        fi


}


#####################################
# STATUS $ PID $ DATE INJECTOR 2    #
#####################################

getINJECTOR2Status() {

        ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep -w $EJB1_SERVINJECT2 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep -w $EJB1_SERVINJECT2 | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INJEC2 ps -eo pid,start | grep -w $ID1)
            INJECT2_STATUS=1
            
        fi
        
        ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep -w $EJB1_SERVINJECT2 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "---------------------------------------${JAUNE}INJECTOR 2${NORMAL}-------------------------------------------"
                        echo -e "EJB ${JAUNE}${EJB1_SERVINJECT2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}      : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                INJECT2_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "---------------------------------------${JAUNE}INJECTOR 2${NORMAL}-------------------------------------------"
                        echo -e "EJB ${JAUNE}${EJB1_SERVINJECT2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}      : ${ROUGE}DOWN${NORMAL}"
                fi
                INJECT2_STATUS=0
        fi

        IHS1=$(ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS2_HTTP_EJB1 | grep -v grep | head -1)
        if [ "$IHS1" != "" ]; then
            ID2=$(ssh -q ${SERV_INJEC2} ps -eo pid,user,command,args | grep ${SUP_USER} | grep ${IHS2_HTTP_EJB1} | grep -v grep | head -1 | awk -F" " '{print $1}')
            DATE2=$(ssh -q $SERV_INJEC2 ps -eo pid,start | grep -w $ID2)
            IHS2_HTTP_EJB1_STATUS=1
            
        fi

        IHS1=$(ssh -q $SERV_INJEC2 ps -fu $SUP_USER | grep $IHS2_HTTP_EJB1 | grep -v grep | head -1)
        if [ "$IHS1" != "" ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS2_HTTP_EJB1}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}    : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE2}${NORMAL} "
                fi
                IHS2_HTTP_EJB1_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS2_HTTP_EJB1}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}    : ${ROUGE}DOWN${NORMAL}"
                fi
                IHS2_HTTP_EJB1_STATUS=0
        fi

        IHSS1=$(ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS2_HTTPS_EJB1 | grep -v grep | head -1)
        if [ "$IHSS1" != "" ]; then
            ID3=$(ssh -q ${SERV_INJEC2} ps -eo pid,user,command,args | grep ${SUP_USER} | grep ${IHS2_HTTPS_EJB1} | grep -v grep | head -1 | awk -F" " '{print $1}')
            DATE3=$(ssh -q $SERV_INJEC2 ps -eo pid,start | grep -w $ID3)
            IHS2_HTTPS_EJB1_STATUS=1
            
        fi

        IHSS1=$(ssh -q $SERV_INJEC2 ps -fu $SUP_USER | grep $IHS2_HTTPS_EJB1 | grep -v grep | head -1)
        if [ "$IHSS1" != "" ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS2_HTTPS_EJB1}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}   : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE3}${NORMAL} "
                fi
                IHS2_HTTPS_EJB1_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS2_HTTPS_EJB1}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}   : ${ROUGE}DOWN${NORMAL}"
                fi
                IHS2_HTTPS_EJB1_STATUS=0
        fi

########################################################################################################################################################################################################
        echo ""
########################################################################################################################################################################################################

        ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep -w $EJB2_SERVINJECT2 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep -w $EJB2_SERVINJECT2 | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INJEC2 ps -eo pid,start | grep -w $ID1)
            INJECT1_STATUS=1
            
        fi
        
        ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep -w $EJB2_SERVINJECT2 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "EJB ${JAUNE}${EJB2_SERVINJECT2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}      : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                INJECT1_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "EJB ${JAUNE}${EJB2_SERVINJECT2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}      : ${ROUGE}DOWN${NORMAL}"
                fi
                INJECT1_STATUS=0
        fi

        IHS2=$(ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS2_HTTP_EJB2 | grep -v grep | head -1)
        if [ "$IHS2" != "" ]; then
            ID2=$(ssh -q ${SERV_INJEC2} ps -eo pid,user,command,args | grep ${SUP_USER} | grep ${IHS2_HTTP_EJB2} | grep -v grep | head -1 | awk -F" " '{print $1}')
            DATE2=$(ssh -q $SERV_INJEC2 ps -eo pid,start | grep -w $ID2)
            IHS2_HTTP_EJB2_STATUS=1
            
        fi

        IHS2=$(ssh -q $SERV_INJEC2 ps -fu $SUP_USER | grep $IHS2_HTTP_EJB2 | grep -v grep | head -1)
        if [ "$IHS2" != "" ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS2_HTTP_EJB2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}    : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE2}${NORMAL} "
                fi
                IHS2_HTTP_EJB2_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS2_HTTP_EJB2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}    : ${ROUGE}DOWN${NORMAL}"
                fi
                IHS2_HTTP_EJB2_STATUS=0
        fi

        IHSS2=$(ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS2_HTTPS_EJB2 | grep -v grep | head -1)
        if [ "$IHSS2" != "" ]; then
            ID3=$(ssh -q ${SERV_INJEC2} ps -eo pid,user,command,args | grep ${SUP_USER} | grep ${IHS2_HTTPS_EJB2} | grep -v grep | head -1 | awk -F" " '{print $1}')
            DATE3=$(ssh -q $SERV_INJEC2 ps -eo pid,start | grep -w $ID3)
            IHS2_HTTPS_EJB1_STATUS=1
            
        fi

        IHSS2=$(ssh -q $SERV_INJEC2 ps -fu $SUP_USER | grep $IHS2_HTTPS_EJB2 | grep -v grep | head -1)
        if [ "$IHSS2" != "" ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS2_HTTPS_EJB2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}   : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE3}${NORMAL} "
                fi
                IHS2_HTTPS_EJB2_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS2_HTTPS_EJB2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}   : ${ROUGE}DOWN${NORMAL}"
                fi
                IHS2_HTTPS_EJB2_STATUS=0
        fi

########################################################################################################################################################################################################
        echo ""
########################################################################################################################################################################################################

        ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep $INJ_APP_USER | grep -w $WEB1_SERVINJECT2 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep $INJ_APP_USER | grep -w $WEB1_SERVINJECT2 | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INJEC2 ps -eo pid,start | grep -w $ID1)
            INJECT3_STATUS=1
            
        fi
        
        ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep $INJ_APP_USER | grep -w $WEB1_SERVINJECT2 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "WEB ${JAUNE}${WEB1_SERVINJECT2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}      : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                INJECT3_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "WEB ${JAUNE}${WEB1_SERVINJECT2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}      : ${ROUGE}DOWN${NORMAL}"
                fi
                INJECT3_STATUS=0
        fi

        ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep $INJ_APP_USER | grep -w $WEB2_SERVINJECT2 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep $INJ_APP_USER | grep -w $WEB2_SERVINJECT2 | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INJEC2 ps -eo pid,start | grep -w $ID1)
            INJECT4_STATUS=1
            
        fi
        
        ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep $INJ_APP_USER | grep -w $WEB2_SERVINJECT2 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "WEB ${JAUNE}${WEB2_SERVINJECT2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}      : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                INJECT4_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "WEB ${JAUNE}${WEB2_SERVINJECT2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}      : ${ROUGE}DOWN${NORMAL}"
                fi
                INJECT4_STATUS=0
        fi

########################################################################################################################################################################################################
        echo ""
########################################################################################################################################################################################################


}


########################################
# STATUS $ PID $ DATE MQ INJECTOR 2    #
########################################

getMQ_INJECTOR2Status() {

        ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep $MQ_APP_USER | grep -w $MQR1_INJECT2 | grep SYSTEM.CHANNEL | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep $MQ_APP_USER | grep -w $MQR1_INJECT2 | grep SYSTEM.CHANNEL | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INJEC2 ps -eo pid,start | grep -w $ID1)
            MQR1_STATUS=1
            
        fi
        
        ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep $MQ_APP_USER | grep -w $MQR1_INJECT2 | grep SYSTEM.CHANNEL | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "MQ ${JAUNE}${MQR1_MAN_INJECT2}${NORMAL}/${JAUNE}${MQR1_INJECT2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}  : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                MQR1_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "MQ ${JAUNE}${MQR1_MAN_INJECT2}${NORMAL}/${JAUNE}${MQR1_INJECT2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}  : ${ROUGE}DOWN${NORMAL}"
                fi
                MQR1_STATUS=0
        fi

        ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep $MQ_APP_USER | grep -w $MQE1_INJECT2 | grep SYSTEM.CHANNEL | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID2=$(ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep $MQ_APP_USER | grep -w $MQE1_INJECT2 | grep SYSTEM.CHANNEL | grep -v grep | awk -F" " '{print $1}')
            DATE2=$(ssh -q $SERV_INJEC2 ps -eo pid,start | grep -w $ID2)
            MQR2_STATUS=1
            
        fi
        
        ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep $MQ_APP_USER | grep -w $MQE1_INJECT2 | grep SYSTEM.CHANNEL | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "MQ ${JAUNE}${MQE1_MAN_INJECT2}${NORMAL}/${JAUNE}${MQE1_INJECT2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}  : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE2}${NORMAL} "
                fi
                MQR2_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "MQ ${JAUNE}${MQE1_MAN_INJECT2}${NORMAL}/${JAUNE}${MQE1_INJECT2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}  : ${ROUGE}DOWN${NORMAL}"
                fi
                MQR2_STATUS=0
        fi

}


######################################
# STATUS $ PID $ DATE CONSULTATION 1 #
######################################

getCONSULT1Status() {

        ssh -q $SERV_CONS1 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB1_SERVCONS1 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q $SERV_CONS1 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB1_SERVCONS1 | grep -v IBMHTTPServer | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_CONS1 ps -eo pid,start | grep -w $ID1)
            CONS1_STATUS=1
            
        fi
        
        ssh -q $SERV_CONS1 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB1_SERVCONS1 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "-------------------------------------${JAUNE}CONSULTATION 1${NORMAL}-----------------------------------------"
                        echo -e "Cluster A : ${VIOLET}${CLUSTER_A_NAME}${NORMAL}"
                        echo -e "CONS ${JAUNE}${WEB1_SERVCONS1}${NORMAL} on ${CYAN}${SERV_CONS1}${NORMAL}      : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                CONS1_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "-------------------------------------${JAUNE}CONSULTATION 1${NORMAL}-----------------------------------------"
                        echo -e "Cluster A : ${VIOLET}${CLUSTER_A_NAME}${NORMAL}"
                        echo -e "CONS ${JAUNE}${WEB1_SERVCONS1}${NORMAL} on ${CYAN}${SERV_CONS1}${NORMAL}      : ${ROUGE}DOWN${NORMAL}"
                fi
                CONS1_STATUS=0
        fi

        ssh -q $SERV_CONS1 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB2_SERVCONS1 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID2=$(ssh -q $SERV_CONS1 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB2_SERVCONS1 | grep -v IBMHTTPServer | grep -v grep | awk -F" " '{print $1}')
            DATE2=$(ssh -q $SERV_CONS1 ps -eo pid,start | grep -w $ID2)
            CONS2_STATUS=1
            
        fi
        
        ssh -q $SERV_CONS1 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB2_SERVCONS1 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "CONS ${JAUNE}${WEB2_SERVCONS1}${NORMAL} on ${CYAN}${SERV_CONS1}${NORMAL}      : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE2}${NORMAL} "
                fi
                CONS2_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "CONS ${JAUNE}${WEB2_SERVCONS1}${NORMAL} on ${CYAN}${SERV_CONS1}${NORMAL}      : ${ROUGE}DOWN${NORMAL}"
                fi
                CONS2_STATUS=0
        fi

########################################################################################################################################################################################################
        echo ""
########################################################################################################################################################################################################

        IHS1=$(ssh -q $SERV_CONS1 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTP_CONS1 | grep -w IBMHTTPServer | grep -v grep | head -1)
        if [ "$IHS1" != "" ]; then
            ID3=$(ssh -q $SERV_CONS1 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTP_CONS1 | grep -w IBMHTTPServer | grep -v grep | head -1 | awk -F" " '{print $1}')
            DATE3=$(ssh -q $SERV_CONS1 ps -eo pid,start | grep -w $ID3)
            IHS1_STATUS=1
            
        fi

        IHS1=$(ssh -q $SERV_CONS1 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTP_CONS1 | grep -w IBMHTTPServer | grep -v grep | head -1 )
        if [ "$IHS1" != "" ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTP_CONS1}${NORMAL} on ${CYAN}${SERV_CONS1}${NORMAL}     : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE3}${NORMAL} "
                fi
                IHS1_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTP_CONS1}${NORMAL} on ${CYAN}${SERV_CONS1}${NORMAL}     : ${ROUGE}DOWN${NORMAL}"
                fi
                IHS1_STATUS=0
        fi

        IHSS1=$(ssh -q $SERV_CONS1 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTPS_CONS1 | grep -w IBMHTTPServer | grep -v grep | head -1)
        if [ "$IHSS1" != "" ]; then
            ID4=$(ssh -q $SERV_CONS1 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTPS_CONS1 | grep -w IBMHTTPServer | grep -v grep | head -1 | awk -F" " '{print $1}')
            DATE4=$(ssh -q $SERV_CONS1 ps -eo pid,start | grep -w $ID4)
            IHS2_STATUS=1
            
        fi
        
        IHSS1=$(ssh -q $SERV_CONS1 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTPS_CONS1 | grep -w IBMHTTPServer | grep -v grep | head -1)
        if [ "$IHSS1" != "" ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTPS_CONS1}${NORMAL} on ${CYAN}${SERV_CONS1}${NORMAL}    : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE4}${NORMAL} "
                fi
                IHS2_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTPS_CONS1}${NORMAL} on ${CYAN}${SERV_CONS1}${NORMAL}    : ${ROUGE}DOWN${NORMAL}"
                fi
                IHS2_STATUS=0
        fi

}


######################################
# STATUS $ PID $ DATE CONSULTATION 2 #
######################################

getCONSULT2Status() {

        ssh -q $SERV_CONS2 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB1_SERVCONS2 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q $SERV_CONS2 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB1_SERVCONS2 | grep -v IBMHTTPServer | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_CONS2 ps -eo pid,start | grep -w $ID1)
            CONS1_STATUS=1
            
        fi
        
        ssh -q $SERV_CONS2 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB1_SERVCONS2 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "-------------------------------------${JAUNE}CONSULTATION 2${NORMAL}-----------------------------------------"
                        echo -e "Cluster A : ${VIOLET}${CLUSTER_A_NAME}${NORMAL}"
                        echo -e "CONS ${JAUNE}${WEB1_SERVCONS2}${NORMAL} on ${CYAN}${SERV_CONS2}${NORMAL}      : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                CONS1_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "-------------------------------------${JAUNE}CONSULTATION 2${NORMAL}-----------------------------------------"
                        echo -e "Cluster A : ${VIOLET}${CLUSTER_A_NAME}${NORMAL}"
                        echo -e "CONS ${JAUNE}${WEB1_SERVCONS2}${NORMAL} on ${CYAN}${SERV_CONS2}${NORMAL}      : ${ROUGE}DOWN${NORMAL}"
                fi
                CONS1_STATUS=0
        fi

        ssh -q $SERV_CONS2 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB2_SERVCONS2 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID2=$(ssh -q $SERV_CONS2 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB2_SERVCONS2 | grep -v IBMHTTPServer | grep -v grep | awk -F" " '{print $1}')
            DATE2=$(ssh -q $SERV_CONS2 ps -eo pid,start | grep -w $ID2)
            CONS2_STATUS=1
            
        fi
        
        ssh -q $SERV_CONS2 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB2_SERVCONS2 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "CONS ${JAUNE}${WEB2_SERVCONS2}${NORMAL} on ${CYAN}${SERV_CONS2}${NORMAL}      : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE2}${NORMAL} "
                fi
                CONS2_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "CONS ${JAUNE}${WEB2_SERVCONS2}${NORMAL} on ${CYAN}${SERV_CONS2}${NORMAL}      : ${ROUGE}DOWN${NORMAL}"
                fi
                CONS2_STATUS=0
        fi

########################################################################################################################################################################################################
        echo ""
########################################################################################################################################################################################################

        IHS1=$(ssh -q $SERV_CONS2 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTP_CONS2 | grep -w IBMHTTPServer | grep -v grep | head -1)
        if [ "$IHS1" != "" ]; then
            ID3=$(ssh -q $SERV_CONS2 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTP_CONS2 | grep -w IBMHTTPServer | grep -v grep | head -1 | awk -F" " '{print $1}')
            DATE3=$(ssh -q $SERV_CONS2 ps -eo pid,start | grep -w $ID3)
            IHS1_STATUS=1
            
        fi
        
        IHS1=$(ssh -q $SERV_CONS2 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTP_CONS2 | grep -w IBMHTTPServer | grep -v grep | head -1)
        if [ "$IHS1" != "" ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTP_CONS2}${NORMAL} on ${CYAN}${SERV_CONS2}${NORMAL}     : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE3}${NORMAL} "
                fi
                IHS1_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTP_CONS2}${NORMAL} on ${CYAN}${SERV_CONS2}${NORMAL}     : ${ROUGE}DOWN${NORMAL}"
                fi
                IHS1_STATUS=0
        fi

        IHSS1=$(ssh -q $SERV_CONS2 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTPS_CONS2 | grep -w IBMHTTPServer | grep -v grep | head -1)
        if [ "$IHSS1" != "" ]; then
            ID4=$(ssh -q $SERV_CONS2 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTPS_CONS2 | grep -w IBMHTTPServer | grep -v grep | head -1 | awk -F" " '{print $1}')
            DATE4=$(ssh -q $SERV_CONS2 ps -eo pid,start | grep -w $ID4)
            IHS2_STATUS=1
            
        fi
        
        IHSS1=$(ssh -q $SERV_CONS2 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTPS_CONS2 | grep -w IBMHTTPServer | grep -v grep | head -1)
        if [ "$IHSS1" != "" ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTPS_CONS2}${NORMAL} on ${CYAN}${SERV_CONS2}${NORMAL}    : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE4}${NORMAL} "
                fi
                IHS2_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTPS_CONS2}${NORMAL} on ${CYAN}${SERV_CONS2}${NORMAL}    : ${ROUGE}DOWN${NORMAL}"
                fi
                IHS2_STATUS=0
        fi
}


######################################
# STATUS $ PID $ DATE CONSULTATION 3 #
######################################

getCONSULT3Status() {

        ssh -q $SERV_CONS3 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB1_SERVCONS3 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q $SERV_CONS3 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB1_SERVCONS3 | grep -v IBMHTTPServer | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_CONS3 ps -eo pid,start | grep -w $ID1)
            CONS1_STATUS=1
            
        fi
        
        ssh -q $SERV_CONS3 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB1_SERVCONS3 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "-------------------------------------${JAUNE}CONSULTATION 3${NORMAL}-----------------------------------------"
                        echo -e "Cluster B : ${VIOLET}${CLUSTER_B_NAME}${NORMAL}"
                        echo -e "CONS ${JAUNE}${WEB1_SERVCONS3}${NORMAL} on ${CYAN}${SERV_CONS3}${NORMAL}      : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                CONS1_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "-------------------------------------${JAUNE}CONSULTATION 3${NORMAL}-----------------------------------------"
                        echo -e "Cluster B : ${VIOLET}${CLUSTER_B_NAME}${NORMAL}"
                        echo -e "CONS ${JAUNE}${WEB1_SERVCONS3}${NORMAL} on ${CYAN}${SERV_CONS3}${NORMAL}      : ${ROUGE}DOWN${NORMAL}"
                fi
                CONS1_STATUS=0
        fi

        ssh -q $SERV_CONS3 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB2_SERVCONS3 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID2=$(ssh -q $SERV_CONS3 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB2_SERVCONS3 | grep -v IBMHTTPServer | grep -v grep | awk -F" " '{print $1}')
            DATE2=$(ssh -q $SERV_CONS3 ps -eo pid,start | grep -w $ID2)
            CONS2_STATUS=1
            
        fi
        
        ssh -q $SERV_CONS3 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB2_SERVCONS3 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "CONS ${JAUNE}${WEB2_SERVCONS3}${NORMAL} on ${CYAN}${SERV_CONS3}${NORMAL}      : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE2}${NORMAL} "
                fi
                CONS2_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "CONS ${JAUNE}${WEB2_SERVCONS3}${NORMAL} on ${CYAN}${SERV_CONS3}${NORMAL}      : ${ROUGE}DOWN${NORMAL}"
                fi
                CONS2_STATUS=0
        fi

########################################################################################################################################################################################################
        echo ""
########################################################################################################################################################################################################

        IHS1=$(ssh -q $SERV_CONS3 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTP_CONS3 | grep -w IBMHTTPServer | grep -v grep | head -1)
        if [ "$IHS1" != "" ]; then
            ID3=$(ssh -q $SERV_CONS3 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTP_CONS3 | grep -w IBMHTTPServer | grep -v grep | head -1 | awk -F" " '{print $1}')
            DATE3=$(ssh -q $SERV_CONS3 ps -eo pid,start | grep -w $ID3)
            IHS1_STATUS=1
            
        fi
        
        IHS1=$(ssh -q $SERV_CONS3 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTP_CONS3 | grep -w IBMHTTPServer | grep -v grep | head -1)
        if [ "$IHS1" != "" ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTP_CONS3}${NORMAL} on ${CYAN}${SERV_CONS3}${NORMAL}     : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE3}${NORMAL} "
                fi
                IHS1_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTP_CONS3}${NORMAL} on ${CYAN}${SERV_CONS3}${NORMAL}     : ${ROUGE}DOWN${NORMAL}"
                fi
                IHS1_STATUS=0
        fi

        IHSS1=$(ssh -q $SERV_CONS3 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTPS_CONS3 | grep -w IBMHTTPServer | grep -v grep | head -1)
        if [ "$IHSS1" != "" ]; then
            ID4=$(ssh -q $SERV_CONS3 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTPS_CONS3 | grep -w IBMHTTPServer | grep -v grep  | head -1 | awk -F" " '{print $1}')
            DATE4=$(ssh -q $SERV_CONS3 ps -eo pid,start | grep -w $ID4)
            IHS2_STATUS=1
            
        fi
        
        IHSS1=$(ssh -q $SERV_CONS3 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTPS_CONS3 | grep -w IBMHTTPServer | grep -v grep | head -1)
        if [ "$IHSS1" != "" ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTPS_CONS3}${NORMAL} on ${CYAN}${SERV_CONS3}${NORMAL}    : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE4}${NORMAL} "
                fi
                IHS2_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTPS_CONS3}${NORMAL} on ${CYAN}${SERV_CONS3}${NORMAL}    : ${ROUGE}DOWN${NORMAL}"
                fi
                IHS2_STATUS=0
        fi

}


######################################
# STATUS $ PID $ DATE CONSULTATION 4 #
######################################

getCONSULT4Status() {

        ssh -q $SERV_CONS4 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB1_SERVCONS4 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q $SERV_CONS4 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB1_SERVCONS4 | grep -v IBMHTTPServer | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_CONS4 ps -eo pid,start | grep -w $ID1)
            CONS1_STATUS=1
            
        fi
        
        ssh -q $SERV_CONS4 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB1_SERVCONS4 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "-------------------------------------${JAUNE}CONSULTATION 4${NORMAL}-----------------------------------------"
                        echo -e "Cluster B : ${VIOLET}${CLUSTER_B_NAME}${NORMAL}"
                        echo -e "CONS ${JAUNE}${WEB1_SERVCONS4}${NORMAL} on ${CYAN}${SERV_CONS4}${NORMAL}      : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                CONS1_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "-------------------------------------${JAUNE}CONSULTATION 4${NORMAL}-----------------------------------------"
                        echo -e "Cluster B : ${VIOLET}${CLUSTER_B_NAME}${NORMAL}"
                        echo -e "CONS ${JAUNE}${WEB1_SERVCONS4}${NORMAL} on ${CYAN}${SERV_CONS4}${NORMAL}      : ${ROUGE}DOWN${NORMAL}"
                fi
                CONS1_STATUS=0
        fi

        ssh -q $SERV_CONS4 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB2_SERVCONS4 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID2=$(ssh -q $SERV_CONS4 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB2_SERVCONS4 | grep -v IBMHTTPServer | grep -v grep | awk -F" " '{print $1}')
            DATE2=$(ssh -q $SERV_CONS4 ps -eo pid,start | grep -w $ID2)
            CONS2_STATUS=1
            
        fi
        
        ssh -q $SERV_CONS4 ps -eo pid,user,command,args | grep $CONS_APP_USER | grep -w $WEB2_SERVCONS4 | grep -v IBMHTTPServer | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "CONS ${JAUNE}${WEB2_SERVCONS4}${NORMAL} on ${CYAN}${SERV_CONS4}${NORMAL}      : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE2}${NORMAL} "
                fi
                CONS2_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "CONS ${JAUNE}${WEB2_SERVCONS4}${NORMAL} on ${CYAN}${SERV_CONS4}${NORMAL}      : ${ROUGE}DOWN${NORMAL}"
                fi
                CONS2_STATUS=0
        fi

########################################################################################################################################################################################################
        echo ""
########################################################################################################################################################################################################

        IHS1=$(ssh -q $SERV_CONS4 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTP_CONS4 | grep -w IBMHTTPServer | grep -v grep | head -1)
        if [ "$IHS1" != "" ]; then
            ID3=$(ssh -q $SERV_CONS4 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTP_CONS4 | grep -w IBMHTTPServer | grep -v grep | head -1 | awk -F" " '{print $1}')
            DATE3=$(ssh -q $SERV_CONS4 ps -eo pid,start | grep -w $ID3)
            IHS1_STATUS=1
            
        fi
        
        IHS1=$(ssh -q $SERV_CONS4 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTP_CONS4 | grep -w IBMHTTPServer | grep -v grep | head -1)
        if [ "$IHS1" != "" ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTP_CONS4}${NORMAL} on ${CYAN}${SERV_CONS4}${NORMAL}     : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE3}${NORMAL} "
                fi
                IHS1_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTP_CONS4}${NORMAL} on ${CYAN}${SERV_CONS4}${NORMAL}     : ${ROUGE}DOWN${NORMAL}"
                fi
                IHS1_STATUS=0
        fi

        IHSS1=$(ssh -q $SERV_CONS4 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTPS_CONS4 | grep -w IBMHTTPServer | grep -v grep | head -1)
        if [ "$IHSS1" != "" ]; then
            ID4=$(ssh -q $SERV_CONS4 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTPS_CONS4 | grep -w IBMHTTPServer | grep -v grep | head -1 | awk -F" " '{print $1}')
            DATE4=$(ssh -q $SERV_CONS4 ps -eo pid,start | grep -w $ID4)
            IHS2_STATUS=1
            
        fi
        
        IHSS1=$(ssh -q $SERV_CONS4 ps -eo pid,user,command,args | grep $SUP_USER | grep $IHS_HTTPS_CONS4 | grep -w IBMHTTPServer | grep -v grep | head -1)
        if [ "$IHSS1" != "" ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTPS_CONS4}${NORMAL} on ${CYAN}${SERV_CONS4}${NORMAL}    : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE4}${NORMAL} "
                fi
                IHS2_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "IHS ${JAUNE}${IHS_HTTPS_CONS4}${NORMAL} on ${CYAN}${SERV_CONS4}${NORMAL}    : ${ROUGE}DOWN${NORMAL}"
                fi
                IHS2_STATUS=0
        fi

}


##############################
# STATUS $ PID $ DATE ORACLE #
##############################

getORACLEStatus() {

        ssh -q $SERV_ORACLE1 ps -eo pid,user,command,args | grep pmon | grep $ORACLE_INSTANCE1 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q $SERV_ORACLE1 ps -eo pid,user,command,args | grep pmon | grep $ORACLE_INSTANCE1 | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_ORACLE1 ps -eo pid,start | grep -w $ID1)
            ORA1_STATUS=1
            
        fi
        
        ssh -q $SERV_ORACLE1 ps -eo pid,user,command,args | grep pmon | grep $ORACLE_INSTANCE1 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "----------------------------------------${JAUNE}ORACLE${NORMAL}---------------------------------------------"
                        echo -e "ORACLE ${JAUNE}${ORACLE_INSTANCE1}${NORMAL} on ${CYAN}${SERV_ORACLE1}${NORMAL}      : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                ORA1_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "----------------------------------------${JAUNE}ORACLE${NORMAL}---------------------------------------------"
                        echo -e "ORACLE ${JAUNE}${ORACLE_INSTANCE1}${NORMAL} on ${CYAN}${SERV_ORACLE1}${NORMAL}      : ${ROUGE}DOWN${NORMAL}"
                fi
                ORA1_STATUS=0
        fi

        ssh -q $SERV_ORACLE2 ps -eo pid,user,command,args | grep pmon | grep $ORACLE_INSTANCE2 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID2=$(ssh -q $SERV_ORACLE2 ps -eo pid,user,command,args | grep pmon | grep $ORACLE_INSTANCE2 | grep -v grep | awk -F" " '{print $1}')
            DATE2=$(ssh -q $SERV_ORACLE2 ps -eo pid,start | grep -w $ID2)
            ORA2_STATUS=1
            
        fi
        
        ssh -q $SERV_ORACLE2 ps -eo pid,user,command,args | grep pmon | grep $ORACLE_INSTANCE2 | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "ORACLE ${JAUNE}${ORACLE_INSTANCE2}${NORMAL} on ${CYAN}${SERV_ORACLE2}${NORMAL}      : ${VERT}UP${NORMAL}   ||  Linux Process & Start Date : ${VIOLET}${DATE2}${NORMAL} "
                fi
                ORA2_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "ORACLE ${JAUNE}${ORACLE_INSTANCE2}${NORMAL} on ${CYAN}${SERV_ORACLE2}${NORMAL}      : ${ROUGE}DOWN${NORMAL}"
                fi
                ORA2_STATUS=0
        fi
}


#################################################
# STATUS $ PID $ DATE WEBSPHERE SOLR & INDEXEUR #
#################################################

getWEBSPHERE_SOLRStatus() {

       ssh -q $SERV_SOLR1 ps -eo pid,user,command,args | grep /dmgr/config | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q ${SERV_SOLR1} ps -eo pid,user,command,args | grep /dmgr/config | grep -v rc | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_SOLR1 ps -eo pid,start | grep -w $ID1)
            WEB_SERVER12_STATUS2=1
            
        fi
        
        ssh -q $SERV_SOLR1 ps -fu $APP_USER | grep /dmgr/config | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "-----------------------------------${JAUNE}WEBSPHERE INDEXER_SERVER${NORMAL}---------------------------------"
                        echo -e "${JAUNE}DMGR${NORMAL} on ${CYAN}${SERV_SOLR1}${NORMAL}             : ${VERT}UP${NORMAL}    ||    Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                WEB_SERVER12_STATUS2=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "-----------------------------------${JAUNE}WEBSPHERE INDEXER_SERVER${NORMAL}---------------------------------"
                        echo -e "${JAUNE}DMGR${NORMAL} on ${CYAN}${SERV_SOLR1}${NORMAL}             : ${ROUGE}DOWN${NORMAL}"
                fi
                WEB_SERVER12_STATUS2=0
        fi
        

###############################################################################################################################################################################
###############################################################################################################################################################################

       ssh -q $SERV_INDEX1 ps -eo pid,user,command,args | grep nodeagent | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q ${SERV_INDEX1} ps -eo pid,user,command,args | grep nodeagent | grep -v rc | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INDEX1 ps -eo pid,start | grep -w $ID1)
            WEB_SERVER13_STATUS1=1
            
        fi
        
        ssh -q $SERV_INDEX1 ps -fu $APP_USER | grep nodeagent | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        
                        echo -e "Node_Agent on ${CYAN}${SERV_INDEX1}${NORMAL}       : ${VERT}UP${NORMAL}    ||    Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                WEB_SERVER13_STATUS1=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        
                        echo -e "Node_Agent on ${CYAN}${SERV_INDEX1}${NORMAL}       : ${ROUGE}DOWN${NORMAL}"
                fi
                WEB_SERVER13_STATUS1=0
        fi

###############################################################################################################################################################################
###############################################################################################################################################################################

       ssh -q $SERV_INDEX2 ps -eo pid,user,command,args | grep nodeagent | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q ${SERV_INDEX2} ps -eo pid,user,command,args | grep nodeagent | grep -v rc | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INDEX2 ps -eo pid,start | grep -w $ID1)
            WEB_SERVER14_STATUS1=1
            
        fi
        
        ssh -q $SERV_INDEX2 ps -fu $APP_USER | grep nodeagent | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        
                        echo -e "Node_Agent on ${CYAN}${SERV_INDEX2}${NORMAL}       : ${VERT}UP${NORMAL}    ||    Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                WEB_SERVER14_STATUS1=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        
                        echo -e "Node_Agent on ${CYAN}${SERV_INDEX2}${NORMAL}       : ${ROUGE}DOWN${NORMAL}"
                fi
                WEB_SERVER14_STATUS1=0
        fi


}

##############################################
# STATUS $ PID $ DATE WEBSPHERE CONSULTATION #
##############################################

getWEBSPHERE_CONSULTStatus() {

       ssh -q $SERV_CONS1 ps -eo pid,user,command,args | grep nodeagent | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q ${SERV_CONS1} ps -eo pid,user,command,args | grep nodeagent | grep -v rc | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_CONS1 ps -eo pid,start | grep -w $ID1)
            WEB_SERVER1_STATUS1=1
            
        fi
        
        ssh -q $SERV_CONS1 ps -fu $CONS_APP_USER | grep nodeagent | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "---------------------------------${JAUNE}WEBSPHERE CONSULTATION_SERVER${NORMAL}------------------------------"
                        echo -e "Node_Agent on ${CYAN}${SERV_CONS1}${NORMAL}       : ${VERT}UP${NORMAL}    ||    Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                WEB_SERVER1_STATUS1=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "---------------------------------${JAUNE}WEBSPHERE CONSULTATION_SERVER${NORMAL}------------------------------"
                        echo -e "Node_Agent on ${CYAN}${SERV_CONS1}${NORMAL}       : ${ROUGE}DOWN${NORMAL}"
                fi
                WEB_SERVER1_STATUS1=0
        fi

       ssh -q $SERV_CONS1 ps -eo pid,user,command,args | grep /dmgr/config | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q ${SERV_CONS1} ps -eo pid,user,command,args | grep /dmgr/config | grep -v rc | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_CONS1 ps -eo pid,start | grep -w $ID1)
            WEB_SERVER1_STATUS2=1
            
        fi
        
        ssh -q $SERV_CONS1 ps -fu $CONS_APP_USER | grep /dmgr/config | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        
                        echo -e "${JAUNE}DMGR${NORMAL} on ${CYAN}${SERV_CONS1}${NORMAL}             : ${VERT}UP${NORMAL}    ||    Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                WEB_SERVER1_STATUS2=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        
                        echo -e "${JAUNE}DMGR${NORMAL} on ${CYAN}${SERV_CONS1}${NORMAL}             : ${ROUGE}DOWN${NORMAL}"
                fi
                WEB_SERVER1_STATUS2=0
        fi


###############################################################################################################################################################################
###############################################################################################################################################################################

       ssh -q $SERV_CONS2 ps -eo pid,user,command,args | grep nodeagent | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q ${SERV_CONS2} ps -eo pid,user,command,args | grep nodeagent | grep -v rc | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_CONS2 ps -eo pid,start | grep -w $ID1)
            WEB_SERVER2_STATUS1=1
            
        fi
        
        ssh -q $SERV_CONS2 ps -fu $CONS_APP_USER | grep nodeagent | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        
                        echo -e "Node_Agent on ${CYAN}${SERV_CONS2}${NORMAL}       : ${VERT}UP${NORMAL}    ||    Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                WEB_SERVER2_STATUS1=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        
                        echo -e "Node_Agent on ${CYAN}${SERV_CONS2}${NORMAL}       : ${ROUGE}DOWN${NORMAL}"
                fi
                WEB_SERVER2_STATUS1=0
        fi

###############################################################################################################################################################################
###############################################################################################################################################################################

       ssh -q $SERV_CONS3 ps -eo pid,user,command,args | grep nodeagent | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q ${SERV_CONS3} ps -eo pid,user,command,args | grep nodeagent | grep -v rc | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_CONS3 ps -eo pid,start | grep -w $ID1)
            WEB_SERVER3_STATUS1=1
            
        fi
        
        ssh -q $SERV_CONS3 ps -fu $CONS_APP_USER | grep nodeagent | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        
                        echo -e "Node_Agent on ${CYAN}${SERV_CONS3}${NORMAL}       : ${VERT}UP${NORMAL}    ||    Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                WEB_SERVER3_STATUS1=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        
                        echo -e "Node_Agent on ${CYAN}${SERV_CONS3}${NORMAL}       : ${ROUGE}DOWN${NORMAL}"
                fi
                WEB_SERVER3_STATUS1=0
        fi

###############################################################################################################################################################################
###############################################################################################################################################################################

       ssh -q $SERV_CONS4 ps -eo pid,user,command,args | grep nodeagent | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q ${SERV_CONS4} ps -eo pid,user,command,args | grep nodeagent | grep -v rc | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_CONS4 ps -eo pid,start | grep -w $ID1)
            WEB_SERVER4_STATUS1=1
            
        fi
        
        ssh -q $SERV_CONS4 ps -fu $CONS_APP_USER | grep nodeagent | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        
                        echo -e "Node_Agent on ${CYAN}${SERV_CONS4}${NORMAL}       : ${VERT}UP${NORMAL}    ||    Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                WEB_SERVER4_STATUS1=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        
                        echo -e "Node_Agent on ${CYAN}${SERV_CONS4}${NORMAL}       : ${ROUGE}DOWN${NORMAL}"
                fi
                WEB_SERVER4_STATUS1=0
        fi

}


##############################################
# STATUS $ PID $ DATE WEBSPHERE CONSULTATION #
##############################################

getWEBSPHERE_INJECTStatus() {

       ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep nodeagent | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q ${SERV_INJEC1} ps -eo pid,user,command,args | grep nodeagent | grep -v rc | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INJEC1 ps -eo pid,start | grep -w $ID1)
            WEB_SERVER1_STATUS1=1
            
        fi
        
        ssh -q $SERV_INJEC1 ps -fu $CONS_APP_USER | grep nodeagent | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        
                        echo -e "----------------------------------${JAUNE}WEBSPHERE INJECTION_SERVER${NORMAL}--------------------------------"
                        echo -e "Node_Agent on ${CYAN}${SERV_INJEC1}${NORMAL}       : ${VERT}UP${NORMAL}    ||    Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                WEB_SERVER1_STATUS1=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        
                        echo -e "----------------------------------${JAUNE}WEBSPHERE INJECTION_SERVER${NORMAL}--------------------------------"
                        echo -e "Node_Agent on ${CYAN}${SERV_INJEC1}${NORMAL}       : ${ROUGE}DOWN${NORMAL}"
                fi
                WEB_SERVER1_STATUS1=0
        fi

       ssh -q $SERV_INJEC1 ps -eo pid,user,command,args | grep /dmgr/config | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q ${SERV_INJEC1} ps -eo pid,user,command,args | grep /dmgr/config | grep -v rc | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INJEC1 ps -eo pid,start | grep -w $ID1)
            WEB_SERVER1_STATUS2=1
            
        fi
        
        ssh -q $SERV_INJEC1 ps -fu $CONS_APP_USER | grep /dmgr/config | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        
                        echo -e "${JAUNE}DMGR${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}             : ${VERT}UP${NORMAL}    ||    Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                WEB_SERVER1_STATUS2=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        
                        echo -e "${JAUNE}DMGR${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}             : ${ROUGE}DOWN${NORMAL}"
                fi
                WEB_SERVER1_STATUS2=0
        fi

###############################################################################################################################################################################
###############################################################################################################################################################################

       ssh -q $SERV_INJEC2 ps -eo pid,user,command,args | grep nodeagent | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q ${SERV_INJEC2} ps -eo pid,user,command,args | grep nodeagent | grep -v rc | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INJEC2 ps -eo pid,start | grep -w $ID1)
            WEB_SERVER2_STATUS1=1
            
        fi
        
        ssh -q $SERV_INJEC2 ps -fu $CONS_APP_USER | grep nodeagent | grep -v rc | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        
                        echo -e "Node_Agent on ${CYAN}${SERV_INJEC2}${NORMAL}       : ${VERT}UP${NORMAL}    ||    Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL} "
                fi
                WEB_SERVER2_STATUS1=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        
                        echo -e "Node_Agent on ${CYAN}${SERV_INJEC2}${NORMAL}       : ${ROUGE}DOWN${NORMAL}"
                fi
                WEB_SERVER2_STATUS1=0
        fi

}


################################################
#      FS STATUS > ${FS_LIMIT}%  INJECTOR 1    #
################################################

getINJECT1_FileSystem() {

ping -c $RETRYCOUNT $SERV_INJEC1 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "-------------------------------------${JAUNE}INJECTOR 1${NORMAL}--------------------------------------------"
        echo -e "${ROUGE}${SERV_INJEC1} is DOWN${NORMAL}"
    else
        echo -e "-------------------------------------${JAUNE}INJECTOR 1${NORMAL}--------------------------------------------"
        echo -e "Filesytem on ${CYAN}${SERV_INJEC1}${NORMAL}"
        
        for dir in ${FS_INJ1[@]}
        do
                # Recuperation du pourcentage d'occupation
                FS=$(ssh -q $SERV_INJEC1 df -h $dir | awk 'NR>=3 {print $4}' | sed 's/[^0-9]//g')
                if (( $FS > $FS_LIMIT ))
                then
                        echo -e "${ROUGE}---------- ATTENTION FS > ${FS_LIMIT}% ------------${NORMAL}"
                        FS1=$(ssh -q $SERV_INJEC1 df -h $dir | awk 'NR>=3 {print " %USAGE: "$4"\t: "$5}')
                        echo -e "${FS1}"
                else
                        echo -e "---------------${VERT} FS < ${FS_LIMIT}% ${NORMAL}-----------------"
                        FS2=$(ssh -q $SERV_INJEC1 df -h $dir | awk 'NR>=3 {print " %USAGE: "$4"\t: "$5}')
                        echo -e "${FS2}"
                fi
        done
    fi
}


################################################
#      FS STATUS > ${FS_LIMIT}%  INJECTOR 2    #
################################################

getINJECT2_FileSystem() {

ping -c $RETRYCOUNT $SERV_INJEC2 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "-------------------------------------${JAUNE}INJECTOR 2${NORMAL}--------------------------------------------"
        echo -e "${ROUGE}${SERV_INJEC2} is DOWN${NORMAL}"
    else
        echo -e "-------------------------------------${JAUNE}INJECTOR 2${NORMAL}--------------------------------------------"
        echo -e "Filesytem on ${CYAN}${SERV_INJEC2}${NORMAL}"
        
        for dir in ${FS_INJ2[@]}
        do
                # Recuperation du pourcentage d'occupation
                FS=$(ssh -q $SERV_INJEC2 df -h $dir | awk 'NR>=3 {print $4}' | sed 's/[^0-9]//g')
                if (( $FS > $FS_LIMIT ))
                then
                        echo -e "${ROUGE}---------- ATTENTION FS > ${FS_LIMIT}% ------------${NORMAL}"
                        FS1=$(ssh -q $SERV_INJEC2 df -h $dir | awk 'NR>=3 {print " %USAGE: "$4"\t: "$5}')
                        echo -e "${FS1}"
                else
                        echo -e "---------------${VERT} FS < ${FS_LIMIT}% ${NORMAL}-----------------"
                        FS2=$(ssh -q $SERV_INJEC2 df -h $dir | awk 'NR>=3 {print " %USAGE: "$4"\t: "$5}')
                        echo -e "${FS2}"
        
                fi
        done
    fi

}


###################################################
#      FS STATUS > ${FS_LIMIT}%  CONSULATION 1    #
###################################################

getCONS1_FileSystem() {

ping -c $RETRYCOUNT $SERV_CONS1 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "-----------------------------------${JAUNE}CONSULTATION 1${NORMAL}------------------------------------------"
        echo -e "Cluster A / ${VIOLET}$CLUSTER_A_NAME${NORMAL}"
        echo -e "${ROUGE}${SERV_CONS1} is DOWN${NORMAL}"
    else
        echo -e "-----------------------------------${JAUNE}CONSULTATION 1${NORMAL}------------------------------------------"
        echo -e "Cluster A / ${VIOLET}$CLUSTER_A_NAME${NORMAL}"
        echo -e "Filesytem on ${CYAN}${SERV_CONS1}${NORMAL}"

        for dir in ${FS_CONS1[@]}
        do
                # Recuperation du pourcentage d'occupation
                FS=$(ssh -q $SERV_CONS1 df -h $dir | awk 'NR>=3 {print $4}' | sed 's/[^0-9]//g')
                if (( $FS > $FS_LIMIT ))
                then
                        echo -e "${ROUGE}---------- ATTENTION FS > ${FS_LIMIT}% ------------${NORMAL}"
                        FS1=$(ssh -q $SERV_CONS1 df -h $dir | awk 'NR>=3 {print " %USAGE: "$4"\t: "$5}')
                        echo -e "${FS1}"
                else
                        echo -e "---------------${VERT} FS < ${FS_LIMIT}% ${NORMAL}-----------------"
                        FS2=$(ssh -q $SERV_CONS1 df -h $dir | awk 'NR>=3 {print " %USAGE: "$4"\t: "$5}')
                        echo -e "${FS2}"

                fi
        done
    fi
}


###################################################
#      FS STATUS > ${FS_LIMIT}%  CONSULATION 2    #
###################################################

getCONS2_FileSystem() {

ping -c $RETRYCOUNT $SERV_CONS2 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "-----------------------------------${JAUNE}CONSULTATION 2${NORMAL}------------------------------------------"
        echo -e "Cluster A / ${VIOLET}$CLUSTER_A_NAME${NORMAL}"
        echo -e "${ROUGE}${SERV_CONS2} is DOWN${NORMAL}"
    else
        echo -e "-----------------------------------${JAUNE}CONSULTATION 2${NORMAL}------------------------------------------"
        echo -e "Cluster A / ${VIOLET}$CLUSTER_A_NAME${NORMAL}"
        echo -e "Filesytem on ${CYAN}${SERV_CONS2}${NORMAL}"
        
        for dir in ${FS_CONS2[@]}
        do
                # Recuperation du pourcentage d'occupation
                FS=$(ssh -q $SERV_CONS2 df -h $dir | awk 'NR>=3 {print $4}' | sed 's/[^0-9]//g')
                if (( $FS > $FS_LIMIT ))
                then
                        echo -e "${ROUGE}---------- ATTENTION FS > ${FS_LIMIT}% ------------${NORMAL}"
                        FS1=$(ssh -q $SERV_CONS2 df -h $dir | awk 'NR>=3 {print " %USAGE: "$4"\t: "$5}')
                        echo -e "${FS1}"
                else
                        echo -e "---------------${VERT} FS < ${FS_LIMIT}% ${NORMAL}-----------------"
                        FS2=$(ssh -q $SERV_CONS2 df -h $dir | awk 'NR>=3 {print " %USAGE: "$4"\t: "$5}')
                        echo -e "${FS2}"
        
                fi
        done
    fi
}


###################################################
#      FS STATUS > ${FS_LIMIT}%  CONSULATION 3    #
###################################################

getCONS3_FileSystem() {

ping -c $RETRYCOUNT $SERV_CONS3 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "-----------------------------------${JAUNE}CONSULTATION 3${NORMAL}------------------------------------------"
        echo -e "Cluster B / ${VIOLET}$CLUSTER_B_NAME${NORMAL}"
        echo -e "${ROUGE}${SERV_CONS3} is DOWN${NORMAL}"
    else
        echo -e "-----------------------------------${JAUNE}CONSULTATION 3${NORMAL}------------------------------------------"
        echo -e "Cluster B / ${VIOLET}$CLUSTER_B_NAME${NORMAL}"
        echo -e "Filesytem on ${CYAN}${SERV_CONS3}${NORMAL}"
        
        for dir in ${FS_CONS3[@]}
        do
                # Recuperation du pourcentage d'occupation
                FS=$(ssh -q $SERV_CONS3 df -h $dir | awk 'NR>=3 {print $4}' | sed 's/[^0-9]//g')
                if (( $FS > $FS_LIMIT ))
                then
                        echo -e "${ROUGE}---------- ATTENTION FS > ${FS_LIMIT}% ------------${NORMAL}"
                        FS1=$(ssh -q $SERV_CONS3 df -h $dir | awk 'NR>=3 {print " %USAGE: "$4"\t: "$5}')
                        echo -e "${FS1}"
                else
                        echo -e "---------------${VERT} FS < ${FS_LIMIT}% ${NORMAL}-----------------"
                        FS2=$(ssh -q $SERV_CONS3 df -h $dir | awk 'NR>=3 {print " %USAGE: "$4"\t: "$5}')
                        echo -e "${FS2}"
        
                fi
        done
    fi
}


###################################################
#      FS STATUS > ${FS_LIMIT}%  CONSULATION 4    #
###################################################

getCONS4_FileSystem() {

ping -c $RETRYCOUNT $SERV_CONS4 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "-----------------------------------${JAUNE}CONSULTATION 4${NORMAL}------------------------------------------"
        echo -e "Cluster B / ${VIOLET}$CLUSTER_B_NAME${NORMAL}"
        echo -e "${ROUGE}${SERV_CONS4} is DOWN${NORMAL}"
    else
        echo -e "-----------------------------------${JAUNE}CONSULTATION 4${NORMAL}------------------------------------------"
        echo -e "Cluster B / ${VIOLET}$CLUSTER_B_NAME${NORMAL}"
        echo -e "Filesytem on ${CYAN}${SERV_CONS4}${NORMAL}"
        
        for dir in ${FS_CONS4[@]}
        do
                # Recuperation du pourcentage d'occupation
                FS=$(ssh -q $SERV_CONS4 df -h $dir | awk 'NR>=3 {print $4}' | sed 's/[^0-9]//g')
                if (( $FS > $FS_LIMIT ))
                then
                        echo -e "${ROUGE}---------- ATTENTION FS > ${FS_LIMIT}% ------------${NORMAL}"
                        FS1=$(ssh -q $SERV_CONS4 df -h $dir | awk 'NR>=3 {print " %USAGE: "$4"\t: "$5}')
                        echo -e "${FS1}"
                else
                        echo -e "---------------${VERT} FS < ${FS_LIMIT}% ${NORMAL}-----------------"
                        FS2=$(ssh -q $SERV_CONS4 df -h $dir | awk 'NR>=3 {print " %USAGE: "$4"\t: "$5}')
                        echo -e "${FS2}"
        
                fi
        done
    fi
}


###########################################################
#      FS STATUS > ${FS_LIMIT}%  INDEXER 1 & ZOOKEEPER    #
###########################################################

getINDX1_FileSystem() {

ping -c $RETRYCOUNT $SERV_INDEX1 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "------------------------------${JAUNE}INDEXER 1 & ZOOKEEPER 1${NORMAL}--------------------------------------"
        echo -e "${ROUGE}${SERV_INDEX1} is DOWN${NORMAL}"
    else
        echo -e "------------------------------${JAUNE}INDEXER 1 & ZOOKEEPER 1${NORMAL}--------------------------------------"
        echo -e "Filesytem on ${CYAN}${SERV_INDEX1}${NORMAL}"
        
        for dir in ${FS_INDEX1[@]}
        do
                # Recuperation du pourcentage d'occupation
                FS=$(ssh -q $SERV_INDEX1 df -h $dir | awk 'NR>=3 {print $4}' | sed 's/[^0-9]//g')
                if (( $FS > $FS_LIMIT ))
                then
                        echo -e "${ROUGE}---------- ATTENTION FS > ${FS_LIMIT}% ------------${NORMAL}"
                        FS1=$(ssh -q $SERV_INDEX1 df -h $dir | awk 'NR>=3 {print " %USAGE: "$4"\t: "$5}')
                        echo -e "${FS1}"
                else
                        echo -e "---------------${VERT} FS < ${FS_LIMIT}% ${NORMAL}-----------------"
                        FS2=$(ssh -q $SERV_INDEX1 df -h $dir | awk 'NR>=3 {print " %USAGE: "$4"\t: "$5}')
                        echo -e "${FS2}"
        
                fi
        done
    fi

}

###########################################################
#      FS STATUS > ${FS_LIMIT}%  INDEXER 2 & ZOOKEEPER    #
###########################################################

getINDX2_FileSystem() {

ping -c $RETRYCOUNT $SERV_INDEX2 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "------------------------------${JAUNE}INDEXER 2 & ZOOKEEPER 2${NORMAL}--------------------------------------"
        echo -e "${ROUGE}${SERV_INDEX2} is DOWN${NORMAL}"
    else
        echo -e "------------------------------${JAUNE}INDEXER 2 & ZOOKEEPER 2${NORMAL}--------------------------------------"
        echo -e "Filesytem on ${CYAN}${SERV_INDEX2}${NORMAL}"
        
        for dir in ${FS_INDEX2[@]}
        do
                # Recuperation du pourcentage d'occupation
                FS=$(ssh -q $SERV_INDEX2 df -h $dir | awk 'NR>=3 {print $4}' | sed 's/[^0-9]//g')
                if (( $FS > $FS_LIMIT ))
                then
                        echo -e "${ROUGE}---------- ATTENTION FS > ${FS_LIMIT}% ------------${NORMAL}"
                        FS1=$(ssh -q $SERV_INDEX2 df -h $dir | awk 'NR>=3 {print " %USAGE: "$4"\t: "$5}')
                        echo -e "${FS1}"
                else
                        echo -e "---------------${VERT} FS < ${FS_LIMIT}% ${NORMAL}-----------------"
                        FS2=$(ssh -q $SERV_INDEX2 df -h $dir | awk 'NR>=3 {print " %USAGE: "$4"\t: "$5}')
                        echo -e "${FS2}"
        
                fi
        done
    fi

}


##############################################
#   INJECTION REPORT FOR SERVER INJECTION 1  #
##############################################

getREPORT_InjectStatus() {


        #----------------------------------------------------------------
        #--------     INTERROGATION INFORMATIONS POUR INJECTEUR 1 -------
        #----------------------------------------------------------------

ping -c $RETRYCOUNT $SERV_INJEC1 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "${ROUGE}${SERV_INJEC1} is DOWN${NORMAL}"
        
        MQ_STATE1=0
        MQ_STATE11=0

        
        NUM1_SUCC_INJ1=0
        NUM1_COMP_INJ1=0
        PER1_INJ1=0
        DER1_INJ1=0
        ECH1_INJ1=0

        NUM2_SUCC_INJ1=0
        NUM2_COMP_INJ1=0
        PER2_INJ1=0
        DER2_INJ1=0
        ECH2_INJ1=0
    else

        MQ_STATE1=$(ssh -q $SERV_INJEC1 df 2>/dev/null | grep $MQR1_INJECT1 | grep qmgrs | awk '{print " "$4"\t"}' | sed 's/[^0-9]*//g')
        MQ_STATE11=$(ssh -q $SERV_INJEC1 df 2>/dev/null | grep $MQE1_INJECT1 | grep qmgrs | awk '{print " "$4"\t"}' | sed 's/[^0-9]*//g')

        MQ_CURDEPTH1=$(ssh -q $SERV_INJEC1 cat $MQ_LOG_PATH_01 | grep $MQR1_MAN_INJECT1 | grep -v -e '^$' | tail -1 | awk -F" " '{print $2}')
        MQ_MAXDEPTH1=$(ssh -q $SERV_INJEC1 cat $MQ_LOG_PATH_01 | grep $MQR1_MAN_INJECT1 | grep -v -e '^$' | tail -1 | awk -F" " '{print $5}')
        MQ_LAST_MOD1=$(ssh -q $SERV_INJEC1 stat -c %y $MQ_LOG_PATH_01 | awk '{printf($2)}' | cut -d . -f 1)

        NUM1_SUCC_INJ1=$(ssh -q $SERV_INJEC1 grep -- "succ" $INJ1_PATH_LOG_01/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
        NUM1_SUCC_INJ1_D=$(echo "$NUM1_SUCC_INJ1" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        NUM1_COMP_INJ1=$(ssh -q $SERV_INJEC1 grep -- "compte" $INJ1_PATH_LOG_01/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
        NUM1_COMP_INJ1_D=$(echo "$NUM1_COMP_INJ1" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

        PER1_INJ1=$(ssh -q $SERV_INJEC1 grep -- "succ" $INJ1_PATH_LOG_01/InjectorToolkit.log.$APPLI.log |  head -n 1 | grep $YEAR-$MONTH-$DAY | awk '{print substr($6, 0, 8)}')
        DER1_INJ1=$(ssh -q $SERV_INJEC1 grep -- "succ" $INJ1_PATH_LOG_01/InjectorToolkit.log.$APPLI.log | tail -1 | grep $YEAR-$MONTH-$DAY | awk '{print substr($6, 0, 8)}')
        ECH1_INJ1=$(ssh -q $SERV_INJEC1 grep -- "echec" $INJ1_PATH_LOG_01/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)

        NUM2_SUCC_INJ1=$(ssh -q $SERV_INJEC1 grep -- "succ" $INJ1_PATH_LOG_02/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
        NUM2_SUCC_INJ1_D=$(echo "$NUM2_SUCC_INJ1" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        NUM2_COMP_INJ1=$(ssh -q $SERV_INJEC1 grep -- "compte" $INJ1_PATH_LOG_02/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
        NUM2_COMP_INJ1_D=$(echo "$NUM2_COMP_INJ1" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

        PER2_INJ1=$(ssh -q $SERV_INJEC1 grep -- "succ" $INJ1_PATH_LOG_02/InjectorToolkit.log.$APPLI.log |  head -n 1 | grep $YEAR-$MONTH-$DAY | awk '{print substr($6, 0, 8)}')
        DER2_INJ1=$(ssh -q $SERV_INJEC1 grep -- "succ" $INJ1_PATH_LOG_02/InjectorToolkit.log.$APPLI.log | tail -1 | grep $YEAR-$MONTH-$DAY | awk '{print substr($6, 0, 8)}')
        ECH2_INJ1=$(ssh -q $SERV_INJEC1 grep -- "echec" $INJ1_PATH_LOG_02/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)

    fi

        #----------------------------------------------------------------
        #--------     INTERROGATION INFORMATIONS POUR INJECTEUR 2 -------
        #----------------------------------------------------------------

ping -c $RETRYCOUNT $SERV_INJEC2 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
            echo -e "${ROUGE}${SERV_INJEC2} is DOWN${NORMAL}"

            MQ_STATE2=0
            MQ_STATE22=0
            
            NUM1_SUCC_INJ2=0
            NUM1_COMP_INJ2=0
            PER1_INJ2=0
            DER1_INJ2=0
            ECH1_INJ2=0
    
            NUM2_SUCC_INJ2=0
            NUM2_COMP_INJ2=0
            PER2_INJ2=0
            DER2_INJ2=0
            ECH2_INJ2=0
    
    else

        MQ_STATE2=$(ssh -q $SERV_INJEC2 df 2>/dev/null | grep $MQR1_INJECT2 | grep qmgrs | awk '{print " "$4"\t"}' | sed 's/[^0-9]*//g')
        MQ_STATE22=$(ssh -q $SERV_INJEC2 df 2>/dev/null | grep $MQE1_INJECT2 | grep qmgrs | awk '{print " "$4"\t"}' | sed 's/[^0-9]*//g')

        MQ_CURDEPTH2=$(ssh -q $SERV_INJEC2 cat $MQ_LOG_PATH_02 | grep $MQR1_MAN_INJECT2 | grep -v -e '^$' | tail -1 | awk -F" " '{print $2}')
        MQ_MAXDEPTH2=$(ssh -q $SERV_INJEC2 cat $MQ_LOG_PATH_02 | grep $MQR1_MAN_INJECT2 | grep -v -e '^$' | tail -1 | awk -F" " '{print $5}')
        MQ_LAST_MOD2=$(ssh -q $SERV_INJEC2 stat -c %y $MQ_LOG_PATH_02 | awk '{printf($2)}' | cut -d . -f 1)

        NUM1_SUCC_INJ2=$(ssh -q $SERV_INJEC2 grep -- "succ" $INJ2_PATH_LOG_01/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
        NUM1_SUCC_INJ2_D=$(echo "$NUM1_SUCC_INJ2" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        NUM1_COMP_INJ2=$(ssh -q $SERV_INJEC2 grep -- "compte" $INJ2_PATH_LOG_01/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
        NUM1_COMP_INJ2_D=$(echo "$NUM1_SUCC_INJ2" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

        PER1_INJ2=$(ssh -q $SERV_INJEC2 grep -- "succ" $INJ2_PATH_LOG_01/InjectorToolkit.log.$APPLI.log |  head -n 1 | grep $YEAR-$MONTH-$DAY | awk '{print substr($6, 0, 8)}')
        DER1_INJ2=$(ssh -q $SERV_INJEC2 grep -- "succ" $INJ2_PATH_LOG_01/InjectorToolkit.log.$APPLI.log | tail -1 | grep $YEAR-$MONTH-$DAY | awk '{print substr($6, 0, 8)}')
        ECH1_INJ2=$(ssh -q $SERV_INJEC2 grep -- "echec" $INJ2_PATH_LOG_01/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)

        NUM2_SUCC_INJ2=$(ssh -q $SERV_INJEC2 grep -- "succ" $INJ2_PATH_LOG_02/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
        NUM2_SUCC_INJ2_D=$(echo "$NUM2_SUCC_INJ2" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        NUM2_COMP_INJ2=$(ssh -q $SERV_INJEC2 grep -- "compte" $INJ2_PATH_LOG_02/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
        NUM2_COMP_INJ2_D=$(echo "$NUM2_COMP_INJ2" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

        PER2_INJ2=$(ssh -q $SERV_INJEC2 grep -- "succ" $INJ2_PATH_LOG_02/InjectorToolkit.log.$APPLI.log |  head -n 1 | grep $YEAR-$MONTH-$DAY | awk '{print substr($6, 0, 8)}')
        DER2_INJ2=$(ssh -q $SERV_INJEC2 grep -- "succ" $INJ2_PATH_LOG_02/InjectorToolkit.log.$APPLI.log | tail -1 | grep $YEAR-$MONTH-$DAY | awk '{print substr($6, 0, 8)}')
        ECH2_INJ2=$(ssh -q $SERV_INJEC2 grep -- "echec" $INJ2_PATH_LOG_02/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)

    fi

        #-------------------------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE SELON LA CONSIGNE POUR MQ ----------
        #-------------------------------------------------------------------------------------


        if (( $MQ_STATE1 < $MQ_LIMIT ))
        then
                MQ_DISPLAY1=${VERT}${MQ_STATE1}${NORMAL}%
        else
                MQ_DISPLAY1=${ROUGE} ATTENTION : ${MQ_STATE1}${NORMAL}% 
        fi 

         if (( $MQ_STATE11 < $MQ_LIMIT ))
         then
                 MQ_DISPLAY11=${VERT}${MQ_STATE11}${NORMAL}%
         else
                 MQ_DISPLAY11=${ROUGE} ATTENTION : ${MQ_STATE11}${NORMAL}% 
         fi 

        if (( $MQ_STATE2 < $MQ_LIMIT ))
        then
                MQ_DISPLAY2=${VERT}${MQ_STATE2}${NORMAL}%
        else
                MQ_DISPLAY2=${ROUGE} ATTENTION : ${MQ_STATE2}${NORMAL}%
        fi 

         if (( $MQ_STATE22 < $MQ_LIMIT ))
         then
                 MQ_DISPLAY22=${VERT}${MQ_STATE22}${NORMAL}%
         else
                 MQ_DISPLAY22=${ROUGE} ATTENTION : ${MQ_STATE22}${NORMAL}%
         fi 

        if (( $MQ_CURDEPTH1 < $MQ_CUR_LIMIT_ELE ))
        then
                MQ_DISPLAY3=${VERT}${MQ_CURDEPTH1}${NORMAL}
        else
                MQ_DISPLAY3=${ROUGE} ATTENTION : ${MQ_CURDEPTH1}${NORMAL}
        fi 

         if (( $MQ_CURDEPTH2 < $MQ_CUR_LIMIT_ELE ))
         then
                 MQ_DISPLAY4=${VERT}${MQ_CURDEPTH2}${NORMAL}
         else
                 MQ_DISPLAY4=${ROUGE} ATTENTION : ${MQ_CURDEPTH2}${NORMAL}
         fi 


        #---------------------------------------------------------------
        #-------------- CALCUL POURCENTAGE OCCUPATION FILE MQ ----------
        #---------------------------------------------------------------


        if (( $MQ_MAXDEPTH1 == 0))
            then
                MQ_MAXDEPTH1=1
                DELTA_NUM1=$(($MQ_CURDEPTH1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / $MQ_MAXDEPTH1))
            else
                DELTA_NUM1=$(($MQ_CURDEPTH1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / $MQ_MAXDEPTH1))
        fi

        if (( $MQ_MAXDEPTH2 == 0))
            then
                MQ_MAXDEPTH2=1
                DELTA_NUM2=$(($MQ_CURDEPTH2 * 100))
                DELTA_FINAL2=$(($DELTA_NUM2 / $MQ_MAXDEPTH2))
            else
                DELTA_NUM2=$(($MQ_CURDEPTH2 * 100))
                DELTA_FINAL2=$(($DELTA_NUM2 / $MQ_MAXDEPTH2))
        fi

        #---------------------------------------------------------------
        #-------- AFFICHAGE REPORT POUR INJECTEURS (INJECTEUR 1)--------
        #---------------------------------------------------------------

        echo -e "---------------------------------------${JAUNE}INJECTOR1 REPORTS${NORMAL} ----------------------------------"
        echo -e "EJB: ${JAUNE}${EJB1_SERVINJECT1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}"
        echo ""
        echo -e "Number of Injections : ${VIOLET}${NUM1_SUCC_INJ1_D}${NORMAL}        ||     Number of Acknowledgement : ${VIOLET}${NUM1_COMP_INJ1_D}${NORMAL}"
        echo -e "First Date Injection : ${VIOLET}${PER1_INJ1}${NORMAL}     ||     Last Date Injection : ${VIOLET}${DER1_INJ1}${NORMAL}"
        echo ""
        echo -e "Number of Injection Error : ${ROUGE}${ECH1_INJ1}${NORMAL}"
        echo "-------------------------------------------------------------------------------------------"
        echo -e "${ROUGE}LAST TNG LOGS${NORMAL}:"
        
        #--------------------------------------------------------------------------------
        #-------- RECHERCHE SUR SERVEUR EJB 1 ON INJECTEUR 1 DES TNGS A AFFICHER --------
        #--------------------------------------------------------------------------------

ping -c $RETRYCOUNT $SERV_INJEC1 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
          echo -e "${ROUGE}${SERV_INJEC1} is DOWN${NORMAL}"
    else
            ssh -q $SERV_INJEC1 ls -lrt $INJ1_PATH_LOG_01 | grep tng | tail -2 > /dev/null
            if [ $? -eq 0 ]; then
                ssh -q $SERV_INJEC1 ls -lrt $INJ1_PATH_LOG_01 | grep tng | tail -2 | awk '{print "   * "$7" "$6" a  "$8"\t"$9}'
            else
            
                echo "   * AUCUN FICHIER TROUVE"
            fi
            
            echo "-------------------------------------------------------------------------------------------"
            echo -e "${ROUGE}LAST SYSTEM ERROR LOGS${NORMAL}:"
    fi
        #------------------------------------------------------------------------------------
        #-------- RECHERCHE SUR SERVEUR EJB1 ON INJECTION 1 DES SYSTEMERR A AFFICHER --------
        #------------------------------------------------------------------------------------

ping -c $RETRYCOUNT $SERV_INJEC1 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
          echo -e "${ROUGE}${SERV_INJEC1} is DOWN${NORMAL}"
          
    else
            ssh -q $SERV_INJEC1 ls -lrt $INJ1_PATH_LOG_01 | grep SystemErr.log > /dev/null
            if [ $? -eq 0 ]; then
                ssh -q $SERV_INJEC1 ls -lrt $INJ1_PATH_LOG_01 | grep SystemErr.log | tail -2 | awk '{print "   * "$7" "$6" a  "$8"\t"$9}'
            else
                echo "   * AUCUN FICHIER TROUVE"
            fi
    fi

        echo "-------------------------------------------------------------------------------------------"
        echo -e "EJB: ${JAUNE}${EJB2_SERVINJECT1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}"
        echo ""
        echo -e "Number of Injections : ${VIOLET}${NUM2_SUCC_INJ1_D}${NORMAL}        ||     Number of Acknowledgement : ${VIOLET}${NUM2_COMP_INJ1_D}${NORMAL}"
        echo -e "First Date Injection : ${VIOLET}${PER2_INJ1}${NORMAL}     ||     Last Date Injection : ${VIOLET}${DER2_INJ1}${NORMAL}"
        echo ""
        echo -e "Number of Injection Error : ${ROUGE}${ECH2_INJ1}${NORMAL}"
        echo "-------------------------------------------------------------------------------------------"
        echo -e "${ROUGE}LAST TNG LOGS${NORMAL}:"
        
        #--------------------------------------------------------------------------------
        #-------- RECHERCHE SUR SERVEUR EJB 2 ON INJECTEUR 1 DES TNGS A AFFICHER --------
        #--------------------------------------------------------------------------------

ping -c $RETRYCOUNT $SERV_INJEC1 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
          echo -e "${ROUGE}${SERV_INJEC1} is DOWN${NORMAL}"
          
    else
            ssh -q $SERV_INJEC1 ls -lrt $INJ1_PATH_LOG_02 | grep tng | tail -2 > /dev/null
            if [ $? -eq 0 ]; then
                ssh -q $SERV_INJEC1 ls -lrt $INJ1_PATH_LOG_02 | grep tng | tail -2 | awk '{print "   * "$7" "$6" a  "$8"\t"$9}'
            else
            
                echo "   * AUCUN FICHIER TROUVE"
            fi
          echo "-------------------------------------------------------------------------------------------"
          echo -e "${ROUGE}LAST SYSTEM ERROR LOGS${NORMAL}:"
    fi

        #-------------------------------------------------------------------------------------
        #-------- RECHERCHE SUR SERVEUR EJB 2 ON INJECTEUR 1 DES SYSTEMERR A AFFICHER --------
        #-------------------------------------------------------------------------------------

ping -c $RETRYCOUNT $SERV_INJEC1 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
          echo -e "${ROUGE}${SERV_INJEC1} is DOWN${NORMAL}"
          
    else
            ssh -q $SERV_INJEC1 ls -lrt $INJ1_PATH_LOG_02 | grep SystemErr.log > /dev/null
            if [ $? -eq 0 ]; then
                ssh -q $SERV_INJEC1 ls -lrt $INJ1_PATH_LOG_02 | grep SystemErr.log | tail -2 | awk '{print "   * "$7" "$6" a  "$8"\t"$9}'
            else

                echo "   * AUCUN FICHIER TROUVE"
            fi

    fi

        #---------------------------------------------
        #-------- AFFICHAGE MQ ON INJECTEUR 1 --------
        #---------------------------------------------

        echo "-------------------------------------------------------------------------------------------"
        echo -e "MQ: ${JAUNE}${MQR1_INJECT1}${NORMAL} / ${JAUNE}${MQE1_INJECT1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}"
        echo ""
        echo -e "MQ: Heure de derniere mise a jour    : ${VERT}${MQ_LAST_MOD1}${NORMAL}"
        echo ""
        echo -e "MQ: FS Reception                     : ${JAUNE}${MQR1_MAN_INJECT1}${NORMAL} / ${JAUNE}${MQR1_INJECT1}${NORMAL} : ${MQ_DISPLAY1}"
        echo -e "MQ: FS Emission                      : ${JAUNE}${MQE1_MAN_INJECT1}${NORMAL} / ${JAUNE}${MQE1_INJECT1}${NORMAL} : ${MQ_DISPLAY11}"
        echo -e "MQ: Reception Maximum Message        : ${JAUNE}${MQR1_MAN_INJECT1}${NORMAL} / ${JAUNE}${MQR1_INJECT1}${NORMAL} : ${VIOLET}${MQ_MAXDEPTH1}${NORMAL}"
        echo -e "MQ: Reception Actual Message         : ${JAUNE}${MQR1_MAN_INJECT1}${NORMAL} / ${JAUNE}${MQR1_INJECT1}${NORMAL} : ${MQ_DISPLAY3}"
        echo -e "MQ: Reception Pourcentage Occupation : ${JAUNE}${MQR1_MAN_INJECT1}${NORMAL} / ${JAUNE}${MQR1_INJECT1}${NORMAL} : ${VIOLET}${DELTA_FINAL1}${NORMAL}%"
            
        #--------------------------------------------------------------------------------
        #-------- CALCUL TOTAL INJECTIONS ON INJECTEUR 1 DES TNGS A AFFICHER ------------
        #--------------------------------------------------------------------------------

        TOTAL_INJ1_SUCC=$(($NUM1_SUCC_INJ1+$NUM2_SUCC_INJ1))
        TOTAL_INJ1_SUCC_D=$(echo "$TOTAL_INJ1_SUCC" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        TOTAL_INJ1_ERR=$(($ECH1_INJ1+$ECH2_INJ1))
        TOTAL_INJ1_ERR_D=$(echo "$TOTAL_INJ1_ERR" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        TOTAL_INJ1_ACK=$(($NUM1_COMP_INJ1+$NUM2_COMP_INJ1))
        TOTAL_INJ1_ACK_D=$(echo "$TOTAL_INJ1_ACK" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

        #-----------------------------------------------------------------------------------
        #-------- AFFICHAGE TOTAL INJECTIONS ON INJECTEUR 1 A AFFICHER ---------------------
        #-----------------------------------------------------------------------------------

        echo "-------------------------------------------------------------------------------------------"
        echo -e "${JAUNE}TOTAL INJECTIONS${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}"
        echo -e ""
        echo -e "Total Injections            : ${VIOLET}${TOTAL_INJ1_SUCC_D}${NORMAL}"
        echo -e "Total Acknowledgements      : ${VIOLET}${TOTAL_INJ1_ACK_D}${NORMAL}"
        echo -e "Total errors injections     : ${VIOLET}${TOTAL_INJ1_ERR_D}${NORMAL}"

        #---------------------------------------------------------------
        #-------- AFFICHAGE REPORT POUR INJECTEURS (INJECTEUR 2)--------
        #---------------------------------------------------------------

        echo "==========================================================================================="
        echo -e "---------------------------------------${JAUNE}INJECTOR2 REPORTS${NORMAL} ----------------------------------"
        echo -e "EJB: ${JAUNE}${EJB1_SERVINJECT2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}"
        echo ""
        echo -e "Number of Injections : ${VIOLET}${NUM1_SUCC_INJ2_D}${NORMAL}        ||     Number of Acknowledgement : ${VIOLET}${NUM1_COMP_INJ2_D}${NORMAL}"
        echo -e "First Date Injection : ${VIOLET}${PER1_INJ2}${NORMAL}     ||     Last Date Injection : ${VIOLET}${DER1_INJ2}${NORMAL}"
        echo ""
        echo -e "Number of Injection Error : ${ROUGE}${ECH1_INJ2}${NORMAL}"
        echo "-------------------------------------------------------------------------------------------"
        echo -e "${ROUGE}LAST TNG LOGS${NORMAL}:"
        
        #--------------------------------------------------------------------------------
        #-------- RECHERCHE SUR SERVEUR EJB 1 ON INJECTEUR 2 DES TNGS A AFFICHER --------
        #--------------------------------------------------------------------------------

ping -c $RETRYCOUNT $SERV_INJEC2 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
          echo -e "${ROUGE}${SERV_INJEC2} is DOWN${NORMAL}"
          
    else
            ssh -q $SERV_INJEC2 ls -lrt $INJ2_PATH_LOG_01 | grep tng | tail -2 > /dev/null
            if [ $? -eq 0 ]; then
                ssh -q $SERV_INJEC2 ls -lrt $INJ2_PATH_LOG_01 | grep tng | tail -2 | awk '{print "   * "$7" "$6" a  "$8"\t"$9}'
            else
            
                echo "   * AUCUN FICHIER TROUVE"
            fi


        echo "-------------------------------------------------------------------------------------------"
        echo -e "${ROUGE}LAST SYSTEM ERROR LOGS${NORMAL}:"
    fi

        #---------------------------------------------------------------------------------
        #-------- RECHERCHE SUR SERVEUR EJB1 INJECTION 2 DES SYSTEMERR A AFFICHER --------
        #---------------------------------------------------------------------------------

ping -c $RETRYCOUNT $SERV_INJEC2 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
          echo -e "${ROUGE}${SERV_INJEC2} is DOWN${NORMAL}"
          
    else
            ssh -q $SERV_INJEC2 ls -lrt $INJ2_PATH_LOG_01 | grep SystemErr.log > /dev/null
            if [ $? -eq 0 ]; then
                ssh -q $SERV_INJEC2 ls -lrt $INJ2_PATH_LOG_01 | grep SystemErr.log | tail -2 | awk '{print "   * "$7" "$6" a  "$8"\t"$9}'
            else

                echo "   * AUCUN FICHIER TROUVE"
            fi

    fi

        echo "-------------------------------------------------------------------------------------------"
        echo -e "EJB: ${JAUNE}${EJB2_SERVINJECT2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}"
        echo ""
        echo -e "Number of Injections : ${VIOLET}${NUM2_SUCC_INJ2_D}${NORMAL}        ||     Number of Acknowledgement : ${VIOLET}${NUM2_COMP_INJ2_D}${NORMAL}"
        echo -e "First Date Injection : ${VIOLET}${PER2_INJ2}${NORMAL}     ||     Last Date Injection : ${VIOLET}${DER2_INJ2}${NORMAL}"
        echo ""
        echo -e "Number of Injection Error : ${ROUGE}${ECH2_INJ2}${NORMAL}"
        echo "-------------------------------------------------------------------------------------------"
        echo -e "${ROUGE}LAST TNG LOGS${NORMAL}:"

        #--------------------------------------------------------------------------------
        #-------- RECHERCHE SUR SERVEUR EJB 2 ON INJECTEUR 2 DES TNGS A AFFICHER --------
        #--------------------------------------------------------------------------------

ping -c $RETRYCOUNT $SERV_INJEC2 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
          echo -e "${ROUGE}${SERV_INJEC2} is DOWN${NORMAL}"
          
    else
            ssh -q $SERV_INJEC2 ls -lrt $INJ2_PATH_LOG_02 | grep tng | tail -2 > /dev/null
            if [ $? -eq 0 ]; then
                ssh -q $SERV_INJEC2 ls -lrt $INJ2_PATH_LOG_02 | grep tng | tail -2 | awk '{print "   * "$7" "$6" a  "$8"\t"$9}'
            else

                echo "   * AUCUN FICHIER TROUVE"
            fi

        echo "-------------------------------------------------------------------------------------------"
        echo -e "${ROUGE}LAST SYSTEM ERROR LOGS${NORMAL}:"
    fi

        #-------------------------------------------------------------------------------------
        #-------- RECHERCHE SUR SERVEUR EJB 2 ON INJECTEUR 2 DES SYSTEMERR A AFFICHER --------
        #-------------------------------------------------------------------------------------

ping -c $RETRYCOUNT $SERV_INJEC2 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
          echo -e "${ROUGE}${SERV_INJEC2} is DOWN${NORMAL}"
          
    else
            ssh -q $SERV_INJEC2 ls -lrt $INJ2_PATH_LOG_02 | grep SystemErr.log > /dev/null
            if [ $? -eq 0 ]; then
                ssh -q $SERV_INJEC2 ls -lrt $INJ2_PATH_LOG_02 | grep SystemErr.log | tail -2 | awk '{print "   * "$7" "$6" a  "$8"\t"$9}'
            else
                echo "   * AUCUN FICHIER TROUVE"
            fi
    fi

        #---------------------------------------------
        #-------- AFFICHAGE MQ ON INJECTEUR 2 --------
        #---------------------------------------------

        echo "-------------------------------------------------------------------------------------------"
        echo -e "MQ: ${JAUNE}${MQR1_INJECT2}${NORMAL} / ${JAUNE}${MQE1_INJECT2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}"
        echo ""
        echo -e "MQ: Heure de derniere mise a jour    : ${VERT}${MQ_LAST_MOD2}${NORMAL}"
        echo ""
        echo -e "MQ: FS Reception                     : ${JAUNE}${MQR1_MAN_INJECT2}${NORMAL} / ${JAUNE}${MQR1_INJECT2}${NORMAL} : ${MQ_DISPLAY2}"
        echo -e "MQ: FS Emission                      : ${JAUNE}${MQE1_MAN_INJECT2}${NORMAL} / ${JAUNE}${MQE1_INJECT2}${NORMAL} : ${MQ_DISPLAY22}"
        echo -e "MQ: Reception Maximum Message        : ${JAUNE}${MQR1_MAN_INJECT2}${NORMAL} / ${JAUNE}${MQR1_INJECT2}${NORMAL} : ${VIOLET}${MQ_MAXDEPTH2}${NORMAL}"
        echo -e "MQ: Reception Actual Message         : ${JAUNE}${MQR1_MAN_INJECT2}${NORMAL} / ${JAUNE}${MQR1_INJECT2}${NORMAL} : ${MQ_DISPLAY4}"
        echo -e "MQ: Reception Pourcentage Occupation : ${JAUNE}${MQR1_MAN_INJECT2}${NORMAL} / ${JAUNE}${MQR1_INJECT2}${NORMAL} : ${VIOLET}${DELTA_FINAL2}${NORMAL}%"

        #--------------------------------------------------------------------------------
        #-------- CALCUL TOTAL INJECTIONS ON INJECTEUR 2 A AFFICHER ---------------------
        #--------------------------------------------------------------------------------

        TOTAL_INJ2_SUCC=$(($NUM1_SUCC_INJ2+$NUM2_SUCC_INJ2))
        TOTAL_INJ2_SUCC_D=$(echo "$TOTAL_INJ2_SUCC" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        TOTAL_INJ2_ERR=$(($ECH1_INJ2+$ECH2_INJ2))
        TOTAL_INJ2_ERR_D=$(echo "$TOTAL_INJ2_ERR" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        TOTAL_INJ2_ACK=$(($NUM1_COMP_INJ2+$NUM2_COMP_INJ2))
        TOTAL_INJ2_ACK_D=$(echo "$TOTAL_INJ2_ACK" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

        #-----------------------------------------------------------------------------------
        #-------- AFFICHAGE TOTAL INJECTIONS ON INJECTEUR 2 A AFFICHER ---------------------
        #-----------------------------------------------------------------------------------

        echo "-------------------------------------------------------------------------------------------"
        echo -e "${JAUNE}TOTAL INJECTIONS${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}"
        echo -e ""
        echo -e "Total Injections            : ${VIOLET}${TOTAL_INJ2_SUCC_D}${NORMAL}"
        echo -e "Total Acknowledgements      : ${VIOLET}${TOTAL_INJ2_ACK_D}${NORMAL}"
        echo -e "Total errors injections     : ${VIOLET}${TOTAL_INJ2_ERR_D}${NORMAL}"

        #-----------------------------------------------------------------------------------------------
        #-------- CALCUL GLOBAL INJECTIONS ON INJECTEUR 1 & INJECTEUR 2 A AFFICHER ---------------------
        #-----------------------------------------------------------------------------------------------

        FULL_INJ_SUCC=$(($TOTAL_INJ1_SUCC+$TOTAL_INJ2_SUCC))
        FULL_INJ_SUCC_D=$(echo "$FULL_INJ_SUCC" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        FULL_INJ_ERR=$(($TOTAL_INJ1_ERR+$TOTAL_INJ2_ERR))
        FULL_INJ_ERR_D=$(echo "$FULL_INJ_ERR" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        FULL_INJ_ACK=$(($TOTAL_INJ1_ACK+$TOTAL_INJ2_ACK))
        FULL_INJ_ACK_D=$(echo "$FULL_INJ_ACK" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

        #---------------------------------------------------------------------------------------------------
        #-------- AFFICHAGE GLOBAL INJECTIONS FOR INJECTEUR 1 & INJECTEUR 2 A AFFICHER ---------------------
        #---------------------------------------------------------------------------------------------------

        echo "==========================================================================================="
        echo -e "${JAUNE}GLOBAL INJECTIONS${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL} & ${CYAN}${SERV_INJEC2}${NORMAL}"
        echo -e ""
        echo -e "Global Injections            : ${VIOLET}${FULL_INJ_SUCC_D}${NORMAL}"
        echo -e "Global Acknowledgements      : ${VIOLET}${FULL_INJ_ACK_D}${NORMAL}"
        echo -e "Global Errors injections     : ${VIOLET}${FULL_INJ_ERR_D}${NORMAL}"

}

############################
#   INJECTION REPORT HISTO #
############################

getREPORT_HISTO_InjectStatus() {

            #------------------------------------------------
            #--------     AFFICHAGE MESSAGE D'ATTENTE -------
            #------------------------------------------------
    
    echo -e "${ROUGE}WORK IN PROGRESS... PLEASE WAIT${NORMAL}"
    
            #----------------------------------------------------------------
            #--------     INTERROGATION INFORMATIONS POUR INJECTEUR 1 -------
            #----------------------------------------------------------------
    
                #---------------#
                #-- for today --#
                #---------------#
    
    NUM1_SUCC_INJ1_TODAY=$(ssh -q $SERV_INJEC1 grep -- "succ" $INJ1_PATH_LOG_01/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
    NUM1_COMP_INJ1_TODAY=$(ssh -q $SERV_INJEC1 grep -- "compte" $INJ1_PATH_LOG_01/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
    ECH1_INJ1_TODAY=$(ssh -q $SERV_INJEC1 grep -- "echec" $INJ1_PATH_LOG_01/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
    
    NUM2_SUCC_INJ1_TODAY=$(ssh -q $SERV_INJEC1 grep -- "succ" $INJ1_PATH_LOG_02/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
    NUM2_COMP_INJ1_TODAY=$(ssh -q $SERV_INJEC1 grep -- "compte" $INJ1_PATH_LOG_02/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
    ECH2_INJ1_TODAY=$(ssh -q $SERV_INJEC1 grep -- "echec" $INJ1_PATH_LOG_02/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
    
                #-------------------#
                #-- for yesterday --#
                #-------------------#
    
    NUM1_SUCC_INJ1_DAY1=$(ssh -q $SERV_INJEC1 grep -- "succ" $INJ1_PATH_LOG_01/InjectorToolkit.log.$APPLI.log.$yesterday_inj.log | grep $yesterday_inj | wc -l)
    NUM1_COMP_INJ1_DAY1=$(ssh -q $SERV_INJEC1 grep -- "compte" $INJ1_PATH_LOG_01/InjectorToolkit.log.$APPLI.log.$yesterday_inj.log | grep $yesterday_inj | wc -l)
    ECH1_INJ1_DAY1=$(ssh -q $SERV_INJEC1 grep -- "echec" $INJ1_PATH_LOG_01/InjectorToolkit.log.$APPLI.log.$yesterday_inj.log | grep $yesterday_inj | wc -l)
    
    NUM2_SUCC_INJ1_DAY1=$(ssh -q $SERV_INJEC1 grep -- "succ" $INJ1_PATH_LOG_02/InjectorToolkit.log.$APPLI.log.$yesterday_inj.log | grep $yesterday_inj | wc -l)
    NUM2_COMP_INJ1_DAY1=$(ssh -q $SERV_INJEC1 grep -- "compte" $INJ1_PATH_LOG_02/InjectorToolkit.log.$APPLI.log.$yesterday_inj.log | grep $yesterday_inj | wc -l)
    ECH2_INJ1_DAY1=$(ssh -q $SERV_INJEC1 grep -- "echec" $INJ1_PATH_LOG_02/InjectorToolkit.log.$APPLI.log.$yesterday_inj.log | grep $yesterday_inj | wc -l)
    
                #---------------#
                #-- for day 2 --#
                #---------------#
    
    NUM1_SUCC_INJ1_DAY2=$(ssh -q $SERV_INJEC1 grep -- "succ" $INJ1_PATH_LOG_01/InjectorToolkit.log.$APPLI.log.$day2_inj.log | grep $day2_inj | wc -l)
    NUM1_COMP_INJ1_DAY2=$(ssh -q $SERV_INJEC1 grep -- "compte" $INJ1_PATH_LOG_01/InjectorToolkit.log.$APPLI.log.$day2_inj.log | grep $day2_inj | wc -l)
    ECH1_INJ1_DAY2=$(ssh -q $SERV_INJEC1 grep -- "echec" $INJ1_PATH_LOG_01/InjectorToolkit.log.$APPLI.log.$day2_inj.log | grep $day2_inj | wc -l)
    
    NUM2_SUCC_INJ1_DAY2=$(ssh -q $SERV_INJEC1 grep -- "succ" $INJ1_PATH_LOG_02/InjectorToolkit.log.$APPLI.log.$day2_inj.log | grep $day2_inj | wc -l)
    NUM2_COMP_INJ1_DAY2=$(ssh -q $SERV_INJEC1 grep -- "compte" $INJ1_PATH_LOG_02/InjectorToolkit.log.$APPLI.log.$day2_inj.log | grep $day2_inj | wc -l)
    ECH2_INJ1_DAY2=$(ssh -q $SERV_INJEC1 grep -- "echec" $INJ1_PATH_LOG_02/InjectorToolkit.log.$APPLI.log.$day2_inj.log | grep $day2_inj | wc -l)
    
                #---------------#
                #-- for day 3 --#
                #---------------#
    
    NUM1_SUCC_INJ1_DAY3=$(ssh -q $SERV_INJEC1 grep -- "succ" $INJ1_PATH_LOG_01/InjectorToolkit.log.$APPLI.log.$day3_inj.log | grep $day3_inj | wc -l)
    NUM1_COMP_INJ1_DAY3=$(ssh -q $SERV_INJEC1 grep -- "compte" $INJ1_PATH_LOG_01/InjectorToolkit.log.$APPLI.log.$day3_inj.log | grep $day3_inj | wc -l)
    ECH1_INJ1_DAY3=$(ssh -q $SERV_INJEC1 grep -- "echec" $INJ1_PATH_LOG_01/InjectorToolkit.log.$APPLI.log.$day3_inj.log | grep $day3_inj | wc -l)
    
    NUM2_SUCC_INJ1_DAY3=$(ssh -q $SERV_INJEC1 grep -- "succ" $INJ1_PATH_LOG_02/InjectorToolkit.log.$APPLI.log.$day3_inj.log | grep $day3_inj | wc -l)
    NUM2_COMP_INJ1_DAY3=$(ssh -q $SERV_INJEC1 grep -- "compte" $INJ1_PATH_LOG_02/InjectorToolkit.log.$APPLI.log.$day3_inj.log | grep $day3_inj | wc -l)
    ECH2_INJ1_DAY3=$(ssh -q $SERV_INJEC1 grep -- "echec" $INJ1_PATH_LOG_02/InjectorToolkit.log.$APPLI.log.$day3_inj.log | grep $day3_inj | wc -l)
    
            #----------------------------------------------------------------
            #--------     INTERROGATION INFORMATIONS POUR INJECTEUR 2 -------
            #----------------------------------------------------------------

                #---------------#
                #-- for today --#
                #---------------#
    
    NUM1_SUCC_INJ2_TODAY=$(ssh -q $SERV_INJEC2 grep -- "succ" $INJ2_PATH_LOG_01/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
    NUM1_COMP_INJ2_TODAY=$(ssh -q $SERV_INJEC2 grep -- "compte" $INJ2_PATH_LOG_01/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
    ECH1_INJ2_TODAY=$(ssh -q $SERV_INJEC2 grep -- "echec" $INJ2_PATH_LOG_01/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
    
    NUM2_SUCC_INJ2_TODAY=$(ssh -q $SERV_INJEC2 grep -- "succ" $INJ2_PATH_LOG_02/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
    NUM2_COMP_INJ2_TODAY=$(ssh -q $SERV_INJEC2 grep -- "compte" $INJ2_PATH_LOG_02/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
    ECH2_INJ2_TODAY=$(ssh -q $SERV_INJEC2 grep -- "echec" $INJ2_PATH_LOG_02/InjectorToolkit.log.$APPLI.log | grep $YEAR-$MONTH-$DAY | wc -l)
    
                #-------------------#
                #-- for yesterday --#
                #-------------------#
    
    NUM1_SUCC_INJ2_DAY1=$(ssh -q $SERV_INJEC2 grep -- "succ" $INJ2_PATH_LOG_01/InjectorToolkit.log.$APPLI.log.$yesterday_inj.log | grep $yesterday_inj | wc -l)
    NUM1_COMP_INJ2_DAY1=$(ssh -q $SERV_INJEC2 grep -- "compte" $INJ2_PATH_LOG_01/InjectorToolkit.log.$APPLI.log.$yesterday_inj.log | grep $yesterday_inj | wc -l)
    ECH1_INJ2_DAY1=$(ssh -q $SERV_INJEC2 grep -- "echec" $INJ2_PATH_LOG_01/InjectorToolkit.log.$APPLI.log.$yesterday_inj.log | grep $yesterday_inj | wc -l)
    
    NUM2_SUCC_INJ2_DAY1=$(ssh -q $SERV_INJEC2 grep -- "succ" $INJ2_PATH_LOG_02/InjectorToolkit.log.$APPLI.log.$yesterday_inj.log | grep $yesterday_inj | wc -l)
    NUM2_COMP_INJ2_DAY1=$(ssh -q $SERV_INJEC2 grep -- "compte" $INJ2_PATH_LOG_02/InjectorToolkit.log.$APPLI.log.$yesterday_inj.log | grep $yesterday_inj | wc -l)
    ECH2_INJ2_DAY1=$(ssh -q $SERV_INJEC2 grep -- "echec" $INJ2_PATH_LOG_02/InjectorToolkit.log.$APPLI.log.$yesterday_inj.log | grep $yesterday_inj | wc -l)
    
                #---------------#
                #-- for day 2 --#
                #---------------#
    
    NUM1_SUCC_INJ2_DAY2=$(ssh -q $SERV_INJEC2 grep -- "succ" $INJ2_PATH_LOG_01/InjectorToolkit.log.$APPLI.log.$day2_inj.log | grep $day2_inj | wc -l)
    NUM1_COMP_INJ2_DAY2=$(ssh -q $SERV_INJEC2 grep -- "compte" $INJ2_PATH_LOG_01/InjectorToolkit.log.$APPLI.log.$day2_inj.log | grep $day2_inj | wc -l)
    ECH1_INJ2_DAY2=$(ssh -q $SERV_INJEC2 grep -- "echec" $INJ2_PATH_LOG_01/InjectorToolkit.log.$APPLI.log.$day2_inj.log | grep $day2_inj | wc -l)
    
    NUM2_SUCC_INJ2_DAY2=$(ssh -q $SERV_INJEC2 grep -- "succ" $INJ2_PATH_LOG_02/InjectorToolkit.log.$APPLI.log.$day2_inj.log | grep $day2_inj | wc -l)
    NUM2_COMP_INJ2_DAY2=$(ssh -q $SERV_INJEC2 grep -- "compte" $INJ2_PATH_LOG_02/InjectorToolkit.log.$APPLI.log.$day2_inj.log | grep $day2_inj | wc -l)
    ECH2_INJ2_DAY2=$(ssh -q $SERV_INJEC2 grep -- "echec" $INJ2_PATH_LOG_02/InjectorToolkit.log.$APPLI.log.$day2_inj.log | grep $day2_inj | wc -l)
    
                #---------------#
                #-- for day 3 --#
                #---------------#
    
    NUM1_SUCC_INJ2_DAY3=$(ssh -q $SERV_INJEC2 grep -- "succ" $INJ2_PATH_LOG_01/InjectorToolkit.log.$APPLI.log.$day3_inj.log | grep $day3_inj | wc -l)
    NUM1_COMP_INJ2_DAY3=$(ssh -q $SERV_INJEC2 grep -- "compte" $INJ2_PATH_LOG_01/InjectorToolkit.log.$APPLI.log.$day3_inj.log | grep $day3_inj | wc -l)
    ECH1_INJ2_DAY3=$(ssh -q $SERV_INJEC2 grep -- "echec" $INJ2_PATH_LOG_01/InjectorToolkit.log.$APPLI.log.$day3_inj.log | grep $day3_inj | wc -l)
    
    NUM2_SUCC_INJ2_DAY3=$(ssh -q $SERV_INJEC2 grep -- "succ" $INJ2_PATH_LOG_02/InjectorToolkit.log.$APPLI.log.$day3_inj.log | grep $day3_inj | wc -l)
    NUM2_COMP_INJ2_DAY3=$(ssh -q $SERV_INJEC2 grep -- "compte" $INJ2_PATH_LOG_02/InjectorToolkit.log.$APPLI.log.$day3_inj.log | grep $day3_inj | wc -l)
    ECH2_INJ2_DAY3=$(ssh -q $SERV_INJEC2 grep -- "echec" $INJ2_PATH_LOG_02/InjectorToolkit.log.$APPLI.log.$day3_inj.log | grep $day3_inj | wc -l)
    
            #----------------------------------------------------------------------------
            #-------- CALCUL TOTAL INJECTIONS ON INJECTEUR 1 $ 2 POUR TODAY -------------
            #----------------------------------------------------------------------------
    
    TOTAL_INJ_SUCC_TODAY=$(($NUM1_SUCC_INJ1_TODAY+$NUM2_SUCC_INJ1_TODAY+$NUM1_SUCC_INJ2_TODAY+$NUM2_SUCC_INJ2_TODAY))
    TOTAL_INJ_SUCC_TODAY_D=$(echo "$TOTAL_INJ_SUCC_TODAY" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
    TOTAL_INJ_ERR_TODAY=$(($ECH1_INJ1_TODAY+$ECH2_INJ1_TODAY+$ECH1_INJ2_TODAY+$ECH2_INJ2_TODAY))
    TOTAL_INJ_ERR_TODAY_D=$(echo "$TOTAL_INJ_ERR_TODAY" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
    TOTAL_INJ_ACK_TODAY=$(($NUM1_COMP_INJ1_TODAY+$NUM2_COMP_INJ1_TODAY+$NUM1_COMP_INJ2_TODAY+$NUM2_COMP_INJ2_TODAY))
    TOTAL_INJ_ACK_TODAY_D=$(echo "$TOTAL_INJ_ACK_TODAY" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
    
            #--------------------------------------------------------------------------------
            #-------- CALCUL TOTAL INJECTIONS ON INJECTEUR 1 $ 2 POUR YESTERDAY -------------
            #--------------------------------------------------------------------------------
    
    TOTAL_INJ_SUCC_DAY1=$(($NUM1_SUCC_INJ1_DAY1+$NUM2_SUCC_INJ1_DAY1+$NUM1_SUCC_INJ2_DAY1+$NUM2_SUCC_INJ2_DAY1))
    TOTAL_INJ_SUCC_DAY1_D=$(echo "$TOTAL_INJ_SUCC_DAY1" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
    TOTAL_INJ_ERR_DAY1=$(($ECH1_INJ1_DAY1+$ECH2_INJ1_DAY1+$ECH1_INJ2_DAY1+$ECH2_INJ2_DAY1))
    TOTAL_INJ_ERR_DAY1_D=$(echo "$TOTAL_INJ_ERR_DAY1" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
    TOTAL_INJ_ACK_DAY1=$(($NUM1_COMP_INJ1_DAY1+$NUM2_COMP_INJ1_DAY1+$NUM1_COMP_INJ2_DAY1+$NUM2_COMP_INJ2_DAY1))
    TOTAL_INJ_ACK_DAY1_D=$(echo "$TOTAL_INJ_ACK_DAY1" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
    
            #----------------------------------------------------------------------------
            #-------- CALCUL TOTAL INJECTIONS ON INJECTEUR 1 $ 2 POUR DAY 2 -------------
            #----------------------------------------------------------------------------
    
    TOTAL_INJ_SUCC_DAY2=$(($NUM1_SUCC_INJ1_DAY2+$NUM2_SUCC_INJ1_DAY2+$NUM1_SUCC_INJ2_DAY2+$NUM2_SUCC_INJ2_DAY2))
    TOTAL_INJ_SUCC_DAY2_D=$(echo "$TOTAL_INJ_SUCC_DAY2" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
    TOTAL_INJ_ERR_DAY2=$(($ECH1_INJ1_DAY2+$ECH2_INJ1_DAY2+$ECH1_INJ2_DAY2+$ECH2_INJ2_DAY2))
    TOTAL_INJ_ERR_DAY2_D=$(echo "$TOTAL_INJ_ERR_DAY2" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
    TOTAL_INJ_ACK_DAY2=$(($NUM1_COMP_INJ1_DAY2+$NUM2_COMP_INJ1_DAY2+$NUM1_COMP_INJ2_DAY2+$NUM2_COMP_INJ2_DAY2))
    TOTAL_INJ_ACK_DAY2_D=$(echo "$TOTAL_INJ_ACK_DAY2" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
    
            #----------------------------------------------------------------------------
            #-------- CALCUL TOTAL INJECTIONS ON INJECTEUR 1 $ 2 POUR DAY 3 -------------
            #----------------------------------------------------------------------------
    
    TOTAL_INJ_SUCC_DAY3=$(($NUM1_SUCC_INJ1_DAY3+$NUM2_SUCC_INJ1_DAY3+$NUM1_SUCC_INJ2_DAY3+$NUM2_SUCC_INJ2_DAY3))
    TOTAL_INJ_SUCC_DAY3_D=$(echo "$TOTAL_INJ_SUCC_DAY3" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
    TOTAL_INJ_ERR_DAY3=$(($ECH1_INJ1_DAY3+$ECH2_INJ1_DAY3+$ECH1_INJ2_DAY3+$ECH2_INJ2_DAY3))
    TOTAL_INJ_ERR_DAY3_D=$(echo "$TOTAL_INJ_ERR_DAY3" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
    TOTAL_INJ_ACK_DAY3=$(($NUM1_COMP_INJ1_DAY3+$NUM2_COMP_INJ1_DAY3+$NUM1_COMP_INJ2_DAY3+$NUM2_COMP_INJ2_DAY3))
    TOTAL_INJ_ACK_DAY3_D=$(echo "$TOTAL_INJ_ACK_DAY3" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
    
}


############################
#   INJECTION REPORT HISTO #
############################
getREPORT_HISTO_Display() {

            #---------------------------------------------------------------------------
            #--------     AFFICHAGE DU TABLEAU DE RESULTAT POUR REPORT INJECTION -------
            #---------------------------------------------------------------------------
    
            #---------------------------------------
            #--------     STATIC DISPLAY     -------
            #---------------------------------------
    
    #echo "------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    #echo -e "||\t\t\t\t||\t${VERT}${today_inj_dis}${NORMAL}\t||\t${NORMAL}${yesterday_inj_dis}${NORMAL}\t||\t${JAUNE}${day2_inj_dis}${NORMAL}\t||\t${ROUGE}${day3_inj_dis}${NORMAL}\t||"
    #echo "------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    #echo -e "||  Number of Injections\t||\t  ${VERT}${TOTAL_INJ_SUCC_TODAY_D}${NORMAL}\t\t||\t  ${NORMAL}${TOTAL_INJ_SUCC_DAY1_D}${NORMAL}\t\t||\t  ${JAUNE}${TOTAL_INJ_SUCC_DAY2_D}${NORMAL}\t\t||\t  ${ROUGE}${TOTAL_INJ_SUCC_DAY3_D}${NORMAL}\t\t||"
    #echo "------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    #echo -e "||  Number of Acknowledgement\t||\t  ${VERT}${TOTAL_INJ_ACK_TODAY_D}${NORMAL}\t\t||\t  ${NORMAL}${TOTAL_INJ_ACK_DAY1_D}${NORMAL}\t\t||\t  ${JAUNE}${TOTAL_INJ_ACK_DAY2_D}${NORMAL}\t\t||\t  ${ROUGE}${TOTAL_INJ_ACK_DAY3_D}${NORMAL}\t\t||"
    #echo "------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    #echo -e "||  Number of Injection Error\t||\t\t${VERT}${TOTAL_INJ_ERR_TODAY_D}${NORMAL}\t\t||\t\t${NORMAL}${TOTAL_INJ_ERR_DAY1_D}${NORMAL}\t\t||\t\t${JAUNE}${TOTAL_INJ_ERR_DAY2_D}${NORMAL}\t\t||\t\t${ROUGE}${TOTAL_INJ_ERR_DAY3_D}${NORMAL}\t\t||"
    #echo "------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    
            #---------------------------------------
            #--------     DYNAMIC DISPLAY    -------
            #---------------------------------------
    
    echo -e "-------------------------------------------------------------------------------------------------------------------------------"  | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
    echo -e "||\t\t\t\t ||   ${VERT}${today_inj_dis}${NORMAL}    ||   ${NORMAL}${yesterday_inj_dis}${NORMAL}    ||   ${JAUNE}${day2_inj_dis}${NORMAL}    ||   ${ROUGE}${day3_inj_dis}${NORMAL}    ||"  | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
    echo -e "-------------------------------------------------------------------------------------------------------------------------------"  | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
    awk -v Number=Number_of_Injections -v today=${TOTAL_INJ_SUCC_TODAY_D} -v yesterday=${TOTAL_INJ_SUCC_DAY1_D} -v day2=${TOTAL_INJ_SUCC_DAY2_D} -v day3=${TOTAL_INJ_SUCC_DAY3_D} 'BEGIN {printf "||%30s ||%20s ||%20s ||%20s ||%20s ||\n", Number,today,yesterday,day2,day3}'  | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
    echo -e "-------------------------------------------------------------------------------------------------------------------------------"
    awk -v Number=Number_of_Acknowledgement -v today=${TOTAL_INJ_ACK_TODAY_D} -v yesterday=${TOTAL_INJ_ACK_DAY1_D} -v day2=${TOTAL_INJ_ACK_DAY2_D} -v day3=${TOTAL_INJ_ACK_DAY3_D} 'BEGIN {printf "||%30s ||%20s ||%20s ||%20s ||%20s ||\n", Number,today,yesterday,day2,day3}'  | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
    echo -e "-------------------------------------------------------------------------------------------------------------------------------"  | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
    awk -v Number=Number_of_Injection_Error -v today=${TOTAL_INJ_ERR_TODAY_D} -v yesterday=${TOTAL_INJ_ERR_DAY1_D} -v day2=${TOTAL_INJ_ERR_DAY2_D} -v day3=${TOTAL_INJ_ERR_DAY3_D} 'BEGIN {printf "||%30s ||%20s ||%20s ||%20s ||%20s ||\n", Number,today,yesterday,day2,day3}'  | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
    echo -e "-------------------------------------------------------------------------------------------------------------------------------"  | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
    
}

#######################################
#   INJECTION REPORT PERF PER MINUTES #
#######################################
getREPORT_PERF_InjectStatus() {

    echo -e "${JAUNE}Liste des Injecteurs applicatif :${NORMAL}"
    echo ""
            #---------------------------------------
            #--------     DYNAMIC DISPLAY    -------
            #---------------------------------------
    echo -e "------------------------------------------------------------------" 
    echo -e "||     ${VERT}SERVEURS${NORMAL}    ||     ${CYAN}INJECTEUR 1${NORMAL}     ||     ${CYAN}INJECTEUR 2${NORMAL}     ||"
    echo -e "------------------------------------------------------------------" 
    awk -v server=${SERV_INJEC1} -v injector1=${EJB1_SERVINJECT1} -v injector2=${EJB2_SERVINJECT1} 'BEGIN {printf "||%16s ||%20s ||%20s ||\n", server,injector1,injector2}'
    echo -e "------------------------------------------------------------------"
    awk -v server=${SERV_INJEC2} -v injector1=${EJB1_SERVINJECT2} -v injector2=${EJB2_SERVINJECT2} 'BEGIN {printf "||%16s ||%20s ||%20s ||\n", server,injector1,injector2}'
    echo -e "------------------------------------------------------------------"
            #---------------------------------------
            #--------     USERS CHOICES      -------
            #---------------------------------------
    echo ""
    echo -e "${JAUNE}Quel Injecteur voulez-vous mesurer :${NORMAL}"
    read INPUT_VARIABLE1
    case $INPUT_VARIABLE1 in
    $EJB1_SERVINJECT1)
            SERVER_INJ=${SERV_INJEC1}
            EJB=${EJB1_SERVINJECT1}
            break
            ;;
    $EJB2_SERVINJECT1)
            SERVER_INJ=${SERV_INJEC1}
            EJB=${EJB2_SERVINJECT1}
            break
            ;;
    $EJB1_SERVINJECT2)
            SERVER_INJ=${SERV_INJEC2}
            EJB=${EJB1_SERVINJECT2}
            break
            ;;
            
    $EJB2_SERVINJECT2)
            SERVER_INJ=${SERV_INJEC2}
            EJB=${EJB2_SERVINJECT2}
            break
            ;;
    *)
            echo ""
            echo -e "${ROUGE}Attention Choix non pris en charge, veuillez choisir un nom d'injecteur correct, voir tableau de reference !!!${NORMAL}"
            echo -e "${ROUGE}Bye, Bye${NORMAL}"
            exit 1
    esac
    echo ""
    echo -e "${JAUNE}Quel est le nombre de ligne de TEST :${NORMAL}"
    read ITERATIONS_USER
    if [[ "$ITERATIONS_USER" == ?(+|-)+([0-9]) ]] then
        ITERATIONS=$ITERATIONS_USER
    else
        echo ""
        echo -e "${ROUGE}Veuillez saisir un Nombre de lignes correcte${NORMAL}"
        echo -e "${ROUGE}Bye, Bye${NORMAL}"
        exit 1
    fi
            #------------------------------------------
            #--------     INJECTIONS COUNT      -------
            #------------------------------------------
    LOGFILES=/apps/webservers7/$EJB/logDir/InjectorToolkit.log.ELC_INJ.log
    TMP_FILE=$TMP_FOLDER/mystats.$$.tmp
    INTERVAL=1
    NB_LIGNES=1000
    HEAD="\t${JAUNE}injections\tarbitrages\trollbacks${NORMAL}"
    echo -e "=========================================================="
    echo -e `date +%Y-%m-%d`$HEAD
    echo -e "=========================================================="
    
    i=1
    while [[ $i -le $ITERATIONS ]]
    do
        LAST_SECOND=`date +%H:%M:%S --date "1 seconds ago"`
        > $TMP_FILE
        ssh -q $SERVER_INJ tail -$NB_LIGNES $LOGFILES >> $TMP_FILE
        INJECTIONS=$(cat $TMP_FILE | grep $LAST_SECOND | grep succ | wc -l)
        ARBITRAGES=$(cat $TMP_FILE | grep $LAST_SECOND |grep arbi | wc -l)
        ROLLBACKS=$(cat $TMP_FILE | grep $LAST_SECOND | grep roll | wc -l)
        let "mod=$i%25"
        if [[ $mod -eq 0 ]]
        then
            echo "=========================================================="
            echo -e `date +%Y-%m-%d`$HEAD
            echo "=========================================================="
        fi
            #-------------------------------------------------
            #--------     INJECTIONS COUNT DISPLAY     -------
            #-------------------------------------------------
        echo -e $LAST_SECOND"\t$INJECTIONS\t\t$ARBITRAGES\t\t$ROLLBACKS"
    # selon la charge ou la taille des fichier, le sleep fait sauter des secondes
        sleep $INTERVAL
        let i=$i+1
    done
    rm $TMP_FILE
    
}


#########################
#   CONSULTATION REPORT #
#########################

getREPORT_ConsultStatus() {

ping -c $RETRYCOUNT $SERV_CONS1 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        NUM1_LST_CONS1_T=0
        NUM1_LST_CONS1_Y=0
        NUM1_STR_CONS1_T=0
        NUM1_STR_CONS1_Y=0
    else
        #-------------------------------------------------------------------
        #--------     INTERROGATION INFORMATIONS POUR CONSULTATION 1 -------
        #-------------------------------------------------------------------
        
        #################################################################################
        #Due to a problem with log rotate we need to count the request in a different way
        #################################################################################
        
         GET_LOG_CONS1_01=$(ssh -q $SERV_CONS1 "cd $CONS1_PATH_LOG_01;find * -mtime -4 | grep access_log" | awk -F" " '{print $1}'  | awk '{print}' ORS=' ')
        
        if [[ "$GET_LOG_CONS1_01" == "" ]] 
        then
            GET_LOG_CONS1_01=0
            NUM1_LST_CONS1_T=0
            NUM1_LST_CONS1_Y=0
            NUM1_STR_CONS1_T=0
            NUM1_STR_CONS1_Y=0
        else
         
         NUM1_LST_CONS1_T=$(ssh -q $SERV_CONS1 "cd $CONS1_PATH_LOG_01;grep -- \"GET /service/Hub\" $GET_LOG_CONS1_01 | grep "${today}" | grep -v transac=STRMELC | wc -l")
         NUM1_LST_CONS1_T_D=$(echo "$NUM1_LST_CONS1_T" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
         NUM1_LST_CONS1_Y=$(ssh -q $SERV_CONS1 "cd $CONS1_PATH_LOG_01;grep -- \"GET /service/Hub\" $GET_LOG_CONS1_01 | grep "${yesterday}" | grep -v transac=STRMELC | wc -l")
         NUM1_LST_CONS1_Y_D=$(echo "$NUM1_LST_CONS1_Y" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
         NUM1_STR_CONS1_T=$(ssh -q $SERV_CONS1 "cd $CONS1_PATH_LOG_01;grep -- \"GET /service/Hub\" $GET_LOG_CONS1_01 | grep "${today}" | grep -v transac=LSTELC | wc -l")
         NUM1_STR_CONS1_T_D=$(echo "$NUM1_STR_CONS1_T" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
         NUM1_STR_CONS1_Y=$(ssh -q $SERV_CONS1 "cd $CONS1_PATH_LOG_01;grep -- \"GET /service/Hub\" $GET_LOG_CONS1_01 | grep "${yesterday}" | grep -v transac=LSTELC | wc -l")
         NUM1_STR_CONS1_Y_D=$(echo "$NUM1_STR_CONS1_Y" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        
        fi
    fi

ping -c $RETRYCOUNT $SERV_CONS2 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        NUM1_LST_CONS2_T=0
        NUM1_LST_CONS2_Y=0
        NUM1_STR_CONS2_T=0
        NUM1_STR_CONS2_Y=0
    else
        #-------------------------------------------------------------------
        #--------     INTERROGATION INFORMATIONS POUR CONSULTATION 2 -------
        #-------------------------------------------------------------------

        GET_LOG_CONS2_01=$(ssh -q $SERV_CONS2 "cd $CONS2_PATH_LOG_01;find * -mtime -4 | grep access_log" | awk -F" " '{print $1}'  | awk '{print}' ORS=' ')
        
        if [[ "$GET_LOG_CONS2_01" == "" ]] 
        then
            GET_LOG_CONS2_01=0
            NUM1_LST_CONS2_T=0
            NUM1_LST_CONS2_Y=0
            NUM1_STR_CONS2_T=0
            NUM1_STR_CONS2_Y=0
        else
            NUM1_LST_CONS2_T=$(ssh -q $SERV_CONS2 "cd $CONS2_PATH_LOG_01;grep -- \"GET /service/Hub\" $GET_LOG_CONS2_01 | grep "${today}" | grep -v transac=STRMELC | wc -l")
            NUM1_LST_CONS2_T_D=$(echo "$NUM1_LST_CONS2_T" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
            NUM1_LST_CONS2_Y=$(ssh -q $SERV_CONS2 "cd $CONS2_PATH_LOG_01;grep -- \"GET /service/Hub\" $GET_LOG_CONS2_01 | grep "${yesterday}" | grep -v transac=STRMELC | wc -l")
            NUM1_LST_CONS2_Y_D=$(echo "$NUM1_LST_CONS2_Y" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
            NUM1_STR_CONS2_T=$(ssh -q $SERV_CONS2 "cd $CONS2_PATH_LOG_01;grep -- \"GET /service/Hub\" $GET_LOG_CONS2_01 | grep "${today}" | grep -v transac=LSTELC | wc -l")
            NUM1_STR_CONS2_T_D=$(echo "$NUM1_STR_CONS2_T" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
            NUM1_STR_CONS2_Y=$(ssh -q $SERV_CONS2 "cd $CONS2_PATH_LOG_01;grep -- \"GET /service/Hub\" $GET_LOG_CONS2_01 | grep "${yesterday}" | grep -v transac=LSTELC | wc -l")
            NUM1_STR_CONS2_Y_D=$(echo "$NUM1_STR_CONS2_Y" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        fi
    fi

ping -c $RETRYCOUNT $SERV_CONS3 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        NUM1_LST_CONS3_T=0
        NUM1_LST_CONS3_Y=0
        NUM1_STR_CONS3_T=0
        NUM1_STR_CONS3_Y=0
    else
        #-------------------------------------------------------------------
        #--------     INTERROGATION INFORMATIONS POUR CONSULTATION 3 -------
        #-------------------------------------------------------------------

        GET_LOG_CONS3_01=$(ssh -q $SERV_CONS3 "cd $CONS3_PATH_LOG_01;find * -mtime -4 | grep access_log" | awk -F" " '{print $1}'  | awk '{print}' ORS=' ')

        if [[ "$GET_LOG_CONS3_01" == "" ]] 
        then
            GET_LOG_CONS3_01=0
            NUM1_LST_CONS3_T=0
            NUM1_LST_CONS3_Y=0
            NUM1_STR_CONS3_T=0
            NUM1_STR_CONS3_Y=0
        else

            NUM1_LST_CONS3_T=$(ssh -q $SERV_CONS3 "cd $CONS3_PATH_LOG_01;grep -- \"GET /service/Hub\" $GET_LOG_CONS3_01 | grep "${today}" | grep -v transac=STRMELC | wc -l")
            NUM1_LST_CONS3_T_D=$(echo "$NUM1_LST_CONS3_T" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
            NUM1_LST_CONS3_Y=$(ssh -q $SERV_CONS3 "cd $CONS3_PATH_LOG_01;grep -- \"GET /service/Hub\" $GET_LOG_CONS3_01 | grep "${yesterday}" | grep -v transac=STRMELC | wc -l")
            NUM1_LST_CONS3_Y_D=$(echo "$NUM1_LST_CONS3_Y" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
            NUM1_STR_CONS3_T=$(ssh -q $SERV_CONS3 "cd $CONS3_PATH_LOG_01;grep -- \"GET /service/Hub\" $GET_LOG_CONS3_01 | grep "${today}" | grep -v transac=LSTELC | wc -l")
            NUM1_STR_CONS3_T_D=$(echo "$NUM1_STR_CONS3_T" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
            NUM1_STR_CONS3_Y=$(ssh -q $SERV_CONS3 "cd $CONS3_PATH_LOG_01;grep -- \"GET /service/Hub\" $GET_LOG_CONS3_01 | grep "${yesterday}" | grep -v transac=LSTELC | wc -l")
            NUM1_STR_CONS3_Y_D=$(echo "$NUM1_STR_CONS3_Y" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        fi
    fi

ping -c $RETRYCOUNT $SERV_CONS4 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        NUM1_LST_CONS4_T=0
        NUM1_LST_CONS4_Y=0
        NUM1_STR_CONS4_T=0
        NUM1_STR_CONS4_Y=0
    else
        #-------------------------------------------------------------------
        #--------     INTERROGATION INFORMATIONS POUR CONSULTATION 4 -------
        #-------------------------------------------------------------------

        GET_LOG_CONS4_01=$(ssh -q $SERV_CONS4 "cd $CONS4_PATH_LOG_01;find * -mtime -4 | grep access_log" | awk -F" " '{print $1}'  | awk '{print}' ORS=' ')
        
        if [[ "$GET_LOG_CONS4_01" == "" ]] 
        then
            GET_LOG_CONS4_01=0
            NUM1_LST_CONS4_T=0
            NUM1_LST_CONS4_Y=0
            NUM1_STR_CONS4_T=0
            NUM1_STR_CONS4_Y=0
        else
            NUM1_LST_CONS4_T=$(ssh -q $SERV_CONS4 "cd $CONS4_PATH_LOG_01;grep -- \"GET /service/Hub\" $GET_LOG_CONS4_01 | grep "${today}" | grep -v transac=STRMELC | wc -l")
            NUM1_LST_CONS4_T_D=$(echo "$NUM1_LST_CONS4_T" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
            NUM1_LST_CONS4_Y=$(ssh -q $SERV_CONS4 "cd $CONS4_PATH_LOG_01;grep -- \"GET /service/Hub\" $GET_LOG_CONS4_01 | grep "${yesterday}" | grep -v transac=STRMELC | wc -l")
            NUM1_LST_CONS4_Y_D=$(echo "$NUM1_LST_CONS4_Y" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
            NUM1_STR_CONS4_T=$(ssh -q $SERV_CONS4 "cd $CONS4_PATH_LOG_01;grep -- \"GET /service/Hub\" $GET_LOG_CONS4_01 | grep "${today}" | grep -v transac=LSTELC | wc -l")
            NUM1_STR_CONS4_T_D=$(echo "$NUM1_STR_CONS4_T" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
            NUM1_STR_CONS4_Y=$(ssh -q $SERV_CONS4 "cd $CONS4_PATH_LOG_01;grep -- \"GET /service/Hub\" $GET_LOG_CONS4_01 | grep "${yesterday}" | grep -v transac=LSTELC | wc -l")
            NUM1_STR_CONS4_Y_D=$(echo "$NUM1_STR_CONS4_Y" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        fi
    fi


        #-----------------------------------------------
        #--------     CALCUL TOTAL CLUSTER A     -------
        #-----------------------------------------------

        TOTAL_LIST_CLUSTER_A_T=$(($NUM1_LST_CONS1_T+$NUM1_LST_CONS2_T))
        TOTAL_LIST_CLUSTER_A_T_D=$(echo "$TOTAL_LIST_CLUSTER_A_T" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        TOTAL_LIST_CLUSTER_A_Y=$(($NUM1_LST_CONS1_Y+$NUM1_LST_CONS2_Y))
        TOTAL_LIST_CLUSTER_A_Y_D=$(echo "$TOTAL_LIST_CLUSTER_A_Y" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        TOTAL_STREAM_CLUSTER_A_T=$(($NUM1_STR_CONS1_T+$NUM1_STR_CONS2_T))
        TOTAL_STREAM_CLUSTER_A_T_D=$(echo "$TOTAL_STREAM_CLUSTER_A_T" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        TOTAL_STREAM_CLUSTER_A_Y=$(($NUM1_STR_CONS1_Y+$NUM1_STR_CONS2_Y))
        TOTAL_STREAM_CLUSTER_A_Y_D=$(echo "$TOTAL_STREAM_CLUSTER_A_Y" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

        #-----------------------------------------------
        #--------     CALCUL TOTAL CLUSTER B     -------
        #-----------------------------------------------

        TOTAL_LIST_CLUSTER_B_T=$(($NUM1_LST_CONS3_T+$NUM1_LST_CONS4_T))
        TOTAL_LIST_CLUSTER_B_T_D=$(echo "$TOTAL_LIST_CLUSTER_B_T" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        TOTAL_LIST_CLUSTER_B_Y=$(($NUM1_LST_CONS3_Y+$NUM1_LST_CONS4_Y))
        TOTAL_LIST_CLUSTER_B_Y_D=$(echo "$TOTAL_LIST_CLUSTER_B_Y" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        TOTAL_STREAM_CLUSTER_B_T=$(($NUM1_STR_CONS3_T+$NUM1_STR_CONS4_T))
        TOTAL_STREAM_CLUSTER_B_T_D=$(echo "$TOTAL_STREAM_CLUSTER_B_T" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        TOTAL_STREAM_CLUSTER_B_Y=$(($NUM1_STR_CONS3_Y+$NUM1_STR_CONS4_Y))
        TOTAL_STREAM_CLUSTER_B_Y_D=$(echo "$TOTAL_STREAM_CLUSTER_B_Y" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

        #-----------------------------------------------
        #--------     GLOBAL TOTAL CLUSTER B     -------
        #-----------------------------------------------

        GLOBAL_LIST_T=$(($TOTAL_LIST_CLUSTER_A_T+$TOTAL_LIST_CLUSTER_B_T))
        GLOBAL_LIST_T_D=$(echo "$GLOBAL_LIST_T" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        GLOBAL_LIST_Y=$(($TOTAL_LIST_CLUSTER_A_Y+$TOTAL_LIST_CLUSTER_B_Y))
        GLOBAL_LIST_Y_D=$(echo "$GLOBAL_LIST_Y" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        GLOBAL_STREAM_T=$(($TOTAL_STREAM_CLUSTER_A_T+$TOTAL_STREAM_CLUSTER_B_T))
        GLOBAL_STREAM_T_D=$(echo "$GLOBAL_STREAM_T" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
        GLOBAL_STREAM_Y=$(($TOTAL_STREAM_CLUSTER_A_Y+$TOTAL_STREAM_CLUSTER_B_Y))
        GLOBAL_STREAM_Y_D=$(echo "$GLOBAL_STREAM_Y" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

        #--------------------------------------------------
        #--------     AFFICHAGE CONSULTATION REPORT -------
        #--------------------------------------------------

        echo -e "------------------------------------------------${JAUNE}CONSULTATION REPORTS${NORMAL} --------------------------------------------"
        echo -e "Consultations : ${CYAN}${SERV_CONS1}${NORMAL} / Cluster A : ${VIOLET}${CLUSTER_A_NAME}${NORMAL}"
        echo ""
        echo -e "Number of List consultations on ${BLUE}${yesterday}${NORMAL}   : ${JAUNE}${NUM1_LST_CONS1_Y_D}${NORMAL}  ||  Number of List consultations on ${BLUE}${today}${NORMAL}   : ${JAUNE}${NUM1_LST_CONS1_T_D}${NORMAL}"
        echo -e "Number of Stream consultations on ${BLUE}${yesterday}${NORMAL} : ${JAUNE}${NUM1_STR_CONS1_Y_D}${NORMAL}  ||  Number of Stream consultations on ${BLUE}${today}${NORMAL} : ${JAUNE}${NUM1_STR_CONS1_T_D}${NORMAL}"
        echo -e "-----------------------------------------------------------------------------------------------------------------"
        echo -e "Consultations : ${CYAN}${SERV_CONS2}${NORMAL} / Cluster A : ${VIOLET}${CLUSTER_A_NAME}${NORMAL}"
        echo ""
        echo -e "Number of List consultations on ${BLUE}${yesterday}${NORMAL}   : ${JAUNE}${NUM1_LST_CONS2_Y_D}${NORMAL}  ||  Number of List consultations on ${BLUE}${today}${NORMAL}   : ${JAUNE}${NUM1_LST_CONS2_T_D}${NORMAL}"
        echo -e "Number of Stream consultations on ${BLUE}${yesterday}${NORMAL} : ${JAUNE}${NUM1_STR_CONS2_Y_D}${NORMAL}  ||  Number of Stream consultations on ${BLUE}${today}${NORMAL} : ${JAUNE}${NUM1_STR_CONS2_T_D}${NORMAL}"
        echo -e "-----------------------------------------------------------------------------------------------------------------"
        echo -e "${JAUNE}TOTAL CONSULTATIONS ON CLUSTER A${NORMAL} : ${VIOLET}${CLUSTER_A_NAME}${NORMAL}"
        echo ""
        echo -e "Total of List consultations on ${BLUE}${yesterday}${NORMAL}   : ${JAUNE}${TOTAL_LIST_CLUSTER_A_Y_D}${NORMAL}  ||  Total of List consultations on ${BLUE}${today}${NORMAL}   : ${JAUNE}${TOTAL_LIST_CLUSTER_A_T_D}${NORMAL}"
        echo -e "Total of Stream consultations on ${BLUE}${yesterday}${NORMAL} : ${JAUNE}${TOTAL_STREAM_CLUSTER_A_Y_D}${NORMAL}  ||  Total of Stream consultations on ${BLUE}${today}${NORMAL} : ${JAUNE}${TOTAL_STREAM_CLUSTER_A_T_D}${NORMAL}"
        echo -e "================================================================================================================="
        echo -e "Consultations : ${CYAN}${SERV_CONS3}${NORMAL} / Cluster B : ${VIOLET}${CLUSTER_B_NAME}${NORMAL}"
        echo ""
        echo -e "Number of List consultations on ${BLUE}${yesterday}${NORMAL}   : ${JAUNE}${NUM1_LST_CONS3_Y_D}${NORMAL}  ||  Number of List consultations on ${BLUE}${today}${NORMAL}   : ${JAUNE}${NUM1_LST_CONS3_T_D}${NORMAL}"
        echo -e "Number of Stream consultations on ${BLUE}${yesterday}${NORMAL} : ${JAUNE}${NUM1_STR_CONS3_Y_D}${NORMAL}  ||  Number of Stream consultations on ${BLUE}${today}${NORMAL} : ${JAUNE}${NUM1_STR_CONS3_T_D}${NORMAL}"
        echo -e "-----------------------------------------------------------------------------------------------------------------"
        echo -e "Consultations : ${CYAN}${SERV_CONS4}${NORMAL} / Cluster B : ${VIOLET}${CLUSTER_B_NAME}${NORMAL}"
        echo ""
        echo -e "Number of List consultations on ${BLUE}${yesterday}${NORMAL}   : ${JAUNE}${NUM1_LST_CONS4_Y_D}${NORMAL}  ||  Number of List consultations on ${BLUE}${today}${NORMAL}   : ${JAUNE}${NUM1_LST_CONS4_T_D}${NORMAL}"
        echo -e "Number of Stream consultations on ${BLUE}${yesterday}${NORMAL} : ${JAUNE}${NUM1_STR_CONS4_Y_D}${NORMAL}  ||  Number of Stream consultations on ${BLUE}${today}${NORMAL} : ${JAUNE}${NUM1_STR_CONS4_T_D}${NORMAL}"
        echo -e "-----------------------------------------------------------------------------------------------------------------"
        echo -e "${JAUNE}TOTAL CONSULTATIONS ON CLUSTER B${NORMAL} : ${VIOLET}${CLUSTER_B_NAME}${NORMAL}"
        echo ""
        echo -e "Total of List consultations on ${BLUE}${yesterday}${NORMAL}   : ${JAUNE}${TOTAL_LIST_CLUSTER_B_Y_D}${NORMAL}  ||  Total of List consultations on ${BLUE}${today}${NORMAL}   : ${JAUNE}${TOTAL_LIST_CLUSTER_B_T_D}${NORMAL}"
        echo -e "Total of Stream consultations on ${BLUE}${yesterday}${NORMAL} : ${JAUNE}${TOTAL_STREAM_CLUSTER_B_Y_D}${NORMAL}  ||  Total of Stream consultations on ${BLUE}${today}${NORMAL} : ${JAUNE}${TOTAL_STREAM_CLUSTER_B_T_D}${NORMAL}"
        echo -e "================================================================================================================="
        echo -e "${JAUNE}GLOBAL CONSULTATIONS:${NORMAL}"
        echo ""
        echo -e "Global of List consultations on ${BLUE}${yesterday}${NORMAL}   : ${JAUNE}${GLOBAL_LIST_Y_D}${NORMAL}  ||  Global of List consultations on ${BLUE}${today}${NORMAL}   : ${JAUNE}${GLOBAL_LIST_T_D}${NORMAL}"
        echo -e "Global of Stream consultations on ${BLUE}${yesterday}${NORMAL} : ${JAUNE}${GLOBAL_STREAM_Y_D}${NORMAL}  ||  Global of Stream consultations on ${BLUE}${today}${NORMAL} : ${JAUNE}${GLOBAL_STREAM_T_D}${NORMAL}"

}

#####################################################
# MQ MESSAGES REPORT FOR SERVERS INJECTION FOR ELE  #
#####################################################

getREPORT_ELE_MqStatus() {

        #----------------------------------------------------------------
        #--------     INTERROGATION INFORMATIONS POUR INJECTEUR 1 -------
        #----------------------------------------------------------------

ping -c $RETRYCOUNT $SERV_INJEC1 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "${ROUGE}${SERV_INJEC1} is DOWN${NORMAL}"
        
        MQ_STATE1=0
        MQ_STATE11=0
    else

        MQ_STATE1=$(ssh -q $SERV_INJEC1 df 2>/dev/null | grep $MQR1_INJECT1 | grep qmgrs | awk '{print " "$4"\t"}' | sed 's/[^0-9]*//g')
        MQ_STATE11=$(ssh -q $SERV_INJEC1 df 2>/dev/null | grep $MQE1_INJECT1 | grep qmgrs | awk '{print " "$4"\t"}' | sed 's/[^0-9]*//g')

        MQ_CURDEPTH1=$(ssh -q $SERV_INJEC1 cat $MQ_LOG_PATH_01 | grep $MQR1_MAN_INJECT1 | grep -v -e '^$' | tail -1 | awk -F" " '{print $2}')
        MQ_MAXDEPTH1=$(ssh -q $SERV_INJEC1 cat $MQ_LOG_PATH_01 | grep $MQR1_MAN_INJECT1 | grep -v -e '^$' | tail -1 | awk -F" " '{print $5}')
        MQ_LAST_MOD1=$(ssh -q $SERV_INJEC1 stat -c %y $MQ_LOG_PATH_01 | awk '{printf($2)}' | cut -d . -f 1)
    fi

        #----------------------------------------------------------------
        #--------     INTERROGATION INFORMATIONS POUR INJECTEUR 2 -------
        #----------------------------------------------------------------

ping -c $RETRYCOUNT $SERV_INJEC2 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
            echo -e "${ROUGE}${SERV_INJEC2} is DOWN${NORMAL}"

            MQ_STATE2=0
            MQ_STATE22=0
    else

        MQ_STATE2=$(ssh -q $SERV_INJEC2 df 2>/dev/null | grep $MQR1_INJECT2 | grep qmgrs | awk '{print " "$4"\t"}' | sed 's/[^0-9]*//g')
        MQ_STATE22=$(ssh -q $SERV_INJEC2 df 2>/dev/null | grep $MQE1_INJECT2 | grep qmgrs | awk '{print " "$4"\t"}' | sed 's/[^0-9]*//g')

        MQ_CURDEPTH2=$(ssh -q $SERV_INJEC2 cat $MQ_LOG_PATH_02 | grep $MQR1_MAN_INJECT2 | grep -v -e '^$' | tail -1 | awk -F" " '{print $2}')
        MQ_MAXDEPTH2=$(ssh -q $SERV_INJEC2 cat $MQ_LOG_PATH_02 | grep $MQR1_MAN_INJECT2 | grep -v -e '^$' | tail -1 | awk -F" " '{print $5}')
        MQ_LAST_MOD2=$(ssh -q $SERV_INJEC2 stat -c %y $MQ_LOG_PATH_02 | awk '{printf($2)}' | cut -d . -f 1)
    fi

        #-------------------------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE SELON LA CONSIGNE POUR MQ ----------
        #-------------------------------------------------------------------------------------


        if (( $MQ_STATE1 < $MQ_LIMIT ))
        then
                MQ_DISPLAY1=${VERT}${MQ_STATE1}${NORMAL}%
        else
                MQ_DISPLAY1=${ROUGE}${MQ_STATE1}${NORMAL}% 
        fi 

         if (( $MQ_STATE11 < $MQ_LIMIT ))
         then
                 MQ_DISPLAY11=${VERT}${MQ_STATE11}${NORMAL}%
         else
                 MQ_DISPLAY11=${ROUGE}${MQ_STATE11}${NORMAL}% 
         fi 

        if (( $MQ_STATE2 < $MQ_LIMIT ))
        then
                MQ_DISPLAY2=${VERT}${MQ_STATE2}${NORMAL}%
        else
                MQ_DISPLAY2=${ROUGE}${MQ_STATE2}${NORMAL}%
        fi 

         if (( $MQ_STATE22 < $MQ_LIMIT ))
         then
                 MQ_DISPLAY22=${VERT}${MQ_STATE22}${NORMAL}%
         else
                 MQ_DISPLAY22=${ROUGE}${MQ_STATE22}${NORMAL}%
         fi 

        if (( $MQ_CURDEPTH1 < $MQ_CUR_LIMIT_ELE ))
        then
                MQ_DISPLAY3=${VERT}${MQ_CURDEPTH1}${NORMAL}
        else
                MQ_DISPLAY3=${ROUGE}${MQ_CURDEPTH1}${NORMAL}
        fi 

         if (( $MQ_CURDEPTH2 < $MQ_CUR_LIMIT_ELE ))
         then
                 MQ_DISPLAY4=${VERT}${MQ_CURDEPTH2}${NORMAL}
         else
                 MQ_DISPLAY4=${ROUGE}${MQ_CURDEPTH2}${NORMAL}
         fi 

        #---------------------------------------------------------------
        #-------------- CALCUL POURCENTAGE OCCUPATION FILE MQ ----------
        #---------------------------------------------------------------


        if (( $MQ_MAXDEPTH1 == 0))
            then
                MQ_MAXDEPTH1=1
                DELTA_NUM1=$(($MQ_CURDEPTH1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / $MQ_MAXDEPTH1))
            else
                DELTA_NUM1=$(($MQ_CURDEPTH1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / $MQ_MAXDEPTH1))
        fi

        if (( $MQ_MAXDEPTH2 == 0))
            then
                MQ_MAXDEPTH2=1
                DELTA_NUM2=$(($MQ_CURDEPTH2 * 100))
                DELTA_FINAL2=$(($DELTA_NUM2 / $MQ_MAXDEPTH2))
            else
                DELTA_NUM2=$(($MQ_CURDEPTH2 * 100))
                DELTA_FINAL2=$(($DELTA_NUM2 / $MQ_MAXDEPTH2))
        fi

        #---------------------------------------------
        #-------- AFFICHAGE MQ ON INJECTEUR 1 --------
        #---------------------------------------------

        echo "----------------------------------------------------------------------"
              
        echo -e "MQ: ${JAUNE}${MQR1_INJECT1}${NORMAL} / ${JAUNE}${MQE1_INJECT1}${NORMAL} on ${CYAN}${SERV_INJEC1}${NORMAL}"
        echo ""
        echo -e "MQ: Heure de derniere mise a jour    : ${VERT}${MQ_LAST_MOD1}${NORMAL}"
        echo ""
        echo -e "MQ: FS Reception                     : ${JAUNE}${MQR1_MAN_INJECT1}${NORMAL} / ${JAUNE}${MQR1_INJECT1}${NORMAL} : ${MQ_DISPLAY1}"
        echo -e "MQ: FS Emission                      : ${JAUNE}${MQE1_MAN_INJECT1}${NORMAL} / ${JAUNE}${MQE1_INJECT1}${NORMAL} : ${MQ_DISPLAY11}"
        echo ""
        echo -e "MQ: Reception Maximum Message        : ${JAUNE}${MQR1_MAN_INJECT1}${NORMAL} / ${JAUNE}${MQR1_INJECT1}${NORMAL} : ${VIOLET}${MQ_MAXDEPTH1}${NORMAL}"
        echo -e "MQ: Reception Actual Message         : ${JAUNE}${MQR1_MAN_INJECT1}${NORMAL} / ${JAUNE}${MQR1_INJECT1}${NORMAL} : ${MQ_DISPLAY3}"
        echo -e "MQ: Reception Pourcentage Occupation : ${JAUNE}${MQR1_MAN_INJECT1}${NORMAL} / ${JAUNE}${MQR1_INJECT1}${NORMAL} : ${VIOLET}${DELTA_FINAL1}${NORMAL}%"

        #---------------------------------------------
        #-------- AFFICHAGE MQ ON INJECTEUR 2 --------
        #---------------------------------------------

        echo "----------------------------------------------------------------------"
        echo -e "MQ: ${JAUNE}${MQR1_INJECT2}${NORMAL} / ${JAUNE}${MQE1_INJECT2}${NORMAL} on ${CYAN}${SERV_INJEC2}${NORMAL}"
        echo ""
        echo -e "MQ: Heure de derniere mise a jour    : ${VERT}${MQ_LAST_MOD2}${NORMAL}"
        echo ""
        echo -e "MQ: FS Reception                     : ${JAUNE}${MQR1_MAN_INJECT2}${NORMAL} / ${JAUNE}${MQR1_INJECT2}${NORMAL} : ${MQ_DISPLAY2}"
        echo -e "MQ: FS Emission                      : ${JAUNE}${MQE1_MAN_INJECT2}${NORMAL} / ${JAUNE}${MQE1_INJECT2}${NORMAL} : ${MQ_DISPLAY22}"
        echo ""
        echo -e "MQ: Reception Maximum Message        : ${JAUNE}${MQR1_MAN_INJECT2}${NORMAL} / ${JAUNE}${MQR1_INJECT2}${NORMAL} : ${VIOLET}${MQ_MAXDEPTH2}${NORMAL}"
        echo -e "MQ: Reception Actual Message         : ${JAUNE}${MQR1_MAN_INJECT2}${NORMAL} / ${JAUNE}${MQR1_INJECT2}${NORMAL} : ${MQ_DISPLAY4}"
        echo -e "MQ: Reception Pourcentage Occupation : ${JAUNE}${MQR1_MAN_INJECT2}${NORMAL} / ${JAUNE}${MQR1_INJECT2}${NORMAL} : ${VIOLET}${DELTA_FINAL2}${NORMAL}%"

}


#############################################################
# MEMORY USAGE AND CPU USAGE FOR INDEXER 1 & ZOOKEEPER 1 & 2#
#############################################################

getIND1_ZOO2_MEMStatus() {

ping -c $RETRYCOUNT $SERV_INDEX1 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "--------------------------------------------------------------------${JAUNE}INDEXER 1 & ZOOKEEPER 1 & 2${NORMAL}--------------------------------------------------------------"
        echo -e "${ROUGE}${SERV_INDEX1} is DOWN${NORMAL}"
    else

        #--------------------------------------------------------------------------------
        #-------- INTERROGATION MEMORY USAGE / SWAP MACHINE INDEXER 1 & ZOOKEEPER 1 & 2 -
        #--------------------------------------------------------------------------------

        MEM_TOTAL1=$(ssh -q $SERV_INDEX1 grep 'MemTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE1=$(ssh -q $SERV_INDEX1 grep 'MemFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE_MB1=$(( ${MEM_FREE1%% *} / 1024))
        MEM_SWAP_TOTAL1=$(ssh -q $SERV_INDEX1 grep 'SwapTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_SWAP_FREE1=$(ssh -q $SERV_INDEX1 grep 'SwapFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_UPTIME1=$(ssh -q $SERV_INDEX1 uptime | awk -F" " '{print $3,$4}' | sed 's/\,//g')
        CPU_TOTAL1=$(ssh -q $SERV_INDEX1 cat /proc/cpuinfo | grep processor | wc -l)
        CPU_USAGE1=$(ssh -q $SERV_INDEX1 top -b -n2 -p 1 | fgrep "Cpu(s)" | tail -1 | awk -F'id,' -v prefix="$prefix" '{ split($1, vs, ","); v=vs[length(vs)]; sub("%", "", v); printf "%s%.1f%%\n", prefix, 100 - v }' | sed 's/\%//g')


        #------------------------------------------------------------
        #-------------- CALCUL % USAGE SWAP MEMORY      -------------
        #------------------------------------------------------------

        if (( $MEM_SWAP_TOTAL1 == 0))
            then
                MEM_SWAP_TOTAL1=1
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
            else
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
        fi

        #---------------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE RAM USAGE en Mb ----------
        #---------------------------------------------------------------------------

        if (( $MEM_FREE_MB1 > $MEM_LIMIT ))
        then
                STATE_DISPLAY1=${VERT}${MEM_FREE_MB1}${NORMAL}
        else
                STATE_DISPLAY1=${ROUGE}${MEM_FREE_MB1}${NORMAL}
        fi 

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE SWAP USAGE ---------
        #---------------------------------------------------------------------

        if (( $DELTA_FINAL1 > $MEM_SWAP_LIMIT ))
        then
                STATE_DISPLAY3=${VERT}${DELTA_FINAL1}${NORMAL}
        else
                STATE_DISPLAY3=${ROUGE}${DELTA_FINAL1}${NORMAL}
        fi

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE CPU USAGE ---------
        #---------------------------------------------------------------------

        if (( $CPU_USAGE1 < $CPU_USAG_LIMIT ))
        then
                STATE_DISPLAY4=${VERT}${CPU_USAGE1}${NORMAL}
        else
                STATE_DISPLAY4=${ROUGE}${CPU_USAGE1}${NORMAL}
        fi

        #----------------------------------------------------------------------
        #-------- AFFICHAGE MEM_STATUS FOR INDEXER 1 & ZOOKEEPER 1 & 2 --------
        #----------------------------------------------------------------------

        echo -e "-----------------------------------------------------------------${JAUNE}INDEXER 1 & ZOOKEEPER 1 & 2${NORMAL}-----------------------------------------------------------------"
        echo -e "${CYAN}${SERV_INDEX1}${NORMAL}       : Uptime : ${VIOLET}${MEM_UPTIME1}${NORMAL}  ||  Memory Free: ${STATE_DISPLAY1} Mb  ||  Memory Total : ${BLUE}$(( ${MEM_TOTAL1%% *} / 1024 / 1024))${NORMAL} Gb  ||  Swap Free : ${STATE_DISPLAY3} %  || Number CPU : ${BLUE}${CPU_TOTAL1}${NORMAL}  ||  CPU Usages : ${STATE_DISPLAY4} %"

    fi

}


#########################################################
# MEMORY USAGE AND CPU USAGE FOR INDEXER 2 & ZOOKEEPER 3#
#########################################################

getIND2_ZOO1_MEMStatus() {

ping -c $RETRYCOUNT $SERV_INDEX2 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "-------------------------------------------------------------------${JAUNE}INDEXER 2 & ZOOKEEPER 3${NORMAL}-------------------------------------------------------------------"
        echo -e "${ROUGE}${SERV_INDEX2} is DOWN${NORMAL}"
    else

        #----------------------------------------------------------------------------
        #-------- INTERROGATION MEMORY USAGE / SWAP MACHINE INDEXER 2 & ZOOKEEPER 3 -
        #----------------------------------------------------------------------------

        MEM_TOTAL1=$(ssh -q $SERV_INDEX2 grep 'MemTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE1=$(ssh -q $SERV_INDEX2 grep 'MemFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE_MB1=$(( ${MEM_FREE1%% *} / 1024))
        MEM_SWAP_TOTAL1=$(ssh -q $SERV_INDEX2 grep 'SwapTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_SWAP_FREE1=$(ssh -q $SERV_INDEX2 grep 'SwapFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_UPTIME1=$(ssh -q $SERV_INDEX2 uptime | awk -F" " '{print $3,$4}' | sed 's/\,//g')
        CPU_TOTAL1=$(ssh -q $SERV_INDEX2 cat /proc/cpuinfo | grep processor | wc -l)
        CPU_USAGE1=$(ssh -q $SERV_INDEX2 top -b -n2 -p 1 | fgrep "Cpu(s)" | tail -1 | awk -F'id,' -v prefix="$prefix" '{ split($1, vs, ","); v=vs[length(vs)]; sub("%", "", v); printf "%s%.1f%%\n", prefix, 100 - v }' | sed 's/\%//g')

        #------------------------------------------------------------
        #-------------- CALCUL % USAGE SWAP MEMORY      -------------
        #------------------------------------------------------------

        if (( $MEM_SWAP_TOTAL1 == 0))
            then
                MEM_SWAP_TOTAL1=1
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
            else
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
        fi

        #---------------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE RAM USAGE en Mb ----------
        #---------------------------------------------------------------------------

        if (( $MEM_FREE_MB1 > $MEM_LIMIT ))
        then
                STATE_DISPLAY1=${VERT}${MEM_FREE_MB1}${NORMAL}
        else
                STATE_DISPLAY1=${ROUGE}${MEM_FREE_MB1}${NORMAL}
        fi 

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE SWAP USAGE ---------
        #---------------------------------------------------------------------

        if (( $DELTA_FINAL1 > $MEM_SWAP_LIMIT ))
        then
                STATE_DISPLAY3=${VERT}${DELTA_FINAL1}${NORMAL}
        else
                STATE_DISPLAY3=${ROUGE}${DELTA_FINAL1}${NORMAL}
        fi

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE CPU USAGE ---------
        #---------------------------------------------------------------------

        if (( $CPU_USAGE1 < $CPU_USAG_LIMIT ))
        then
                STATE_DISPLAY4=${VERT}${CPU_USAGE1}${NORMAL}
        else
                STATE_DISPLAY4=${ROUGE}${CPU_USAGE1}${NORMAL}
        fi

        #------------------------------------------------------------------
        #-------- AFFICHAGE MEM_STATUS FOR INDEXER 2 & ZOOKEEPER 3 --------
        #------------------------------------------------------------------

        echo -e "-------------------------------------------------------------------${JAUNE}INDEXER 2 & ZOOKEEPER 3${NORMAL}-------------------------------------------------------------------"
        echo -e "${CYAN}${SERV_INDEX2}${NORMAL}       : Uptime : ${VIOLET}${MEM_UPTIME1}${NORMAL}  ||  Memory Free: ${STATE_DISPLAY1} Mb  ||  Memory Total : ${BLUE}$(( ${MEM_TOTAL1%% *} / 1024 / 1024))${NORMAL} Gb  ||  Swap Free : ${STATE_DISPLAY3} %  || Number CPU : ${BLUE}${CPU_TOTAL1}${NORMAL}  ||  CPU Usages : ${STATE_DISPLAY4} %"

    fi

}


#########################################################
# MEMORY USAGE AND CPU USAGE FOR INJECTOR 1             #
#########################################################

getINJECT1_MEMStatus() {

ping -c $RETRYCOUNT $SERV_INJEC1 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "-------------------------------------------------------------------------${JAUNE}INJECTOR 1${NORMAL}--------------------------------------------------------------------------"
        echo -e "${ROUGE}${SERV_INJEC1} is DOWN${NORMAL}"
    else

        #----------------------------------------------------------------------------
        #-------- INTERROGATION MEMORY USAGE / SWAP MACHINE INJECTEUR 1             -
        #----------------------------------------------------------------------------

        MEM_TOTAL1=$(ssh -q $SERV_INJEC1 grep 'MemTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE1=$(ssh -q $SERV_INJEC1 grep 'MemFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE_MB1=$(( ${MEM_FREE1%% *} / 1024))
        MEM_SWAP_TOTAL1=$(ssh -q $SERV_INJEC1 grep 'SwapTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_SWAP_FREE1=$(ssh -q $SERV_INJEC1 grep 'SwapFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_UPTIME1=$(ssh -q $SERV_INJEC1 uptime | awk -F" " '{print $3,$4}' | sed 's/\,//g')
        CPU_TOTAL1=$(ssh -q $SERV_INJEC1 cat /proc/cpuinfo | grep processor | wc -l)
        CPU_USAGE1=$(ssh -q $SERV_INJEC1 top -b -n2 -p 1 | fgrep "Cpu(s)" | tail -1 | awk -F'id,' -v prefix="$prefix" '{ split($1, vs, ","); v=vs[length(vs)]; sub("%", "", v); printf "%s%.1f%%\n", prefix, 100 - v }' | sed 's/\%//g')

        #------------------------------------------------------------
        #-------------- CALCUL % USAGE SWAP MEMORY      -------------
        #------------------------------------------------------------

        if (( $MEM_SWAP_TOTAL1 == 0))
            then
                MEM_SWAP_TOTAL1=1
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
            else
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
        fi

        #---------------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE RAM USAGE en Mb ----------
        #---------------------------------------------------------------------------

        if (( $MEM_FREE_MB1 > $MEM_LIMIT ))
        then
                STATE_DISPLAY1=${VERT}${MEM_FREE_MB1}${NORMAL}
        else
                STATE_DISPLAY1=${ROUGE}${MEM_FREE_MB1}${NORMAL}
        fi 

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE SWAP USAGE ---------
        #---------------------------------------------------------------------

        if (( $DELTA_FINAL1 > $MEM_SWAP_LIMIT ))
        then
                STATE_DISPLAY3=${VERT}${DELTA_FINAL1}${NORMAL}
        else
                STATE_DISPLAY3=${ROUGE}${DELTA_FINAL1}${NORMAL}
        fi

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE CPU USAGE ---------
        #---------------------------------------------------------------------

        if (( $CPU_USAGE1 < $CPU_USAG_LIMIT ))
        then
                STATE_DISPLAY4=${VERT}${CPU_USAGE1}${NORMAL}
        else
                STATE_DISPLAY4=${ROUGE}${CPU_USAGE1}${NORMAL}
        fi

        #------------------------------------------------------------------
        #-------- AFFICHAGE MEM_STATUS FOR MACHINE INJECTEUR 1     --------
        #------------------------------------------------------------------

        echo -e "-------------------------------------------------------------------------${JAUNE}INJECTOR 1${NORMAL}--------------------------------------------------------------------------"
        echo -e "${CYAN}${SERV_INJEC1}${NORMAL}       : Uptime : ${VIOLET}${MEM_UPTIME1}${NORMAL}  ||  Memory Free: ${STATE_DISPLAY1} Mb  ||  Memory Total : ${BLUE}$(( ${MEM_TOTAL1%% *} / 1024 / 1024))${NORMAL} Gb  ||  Swap Free : ${STATE_DISPLAY3} %  || Number CPU : ${BLUE}${CPU_TOTAL1}${NORMAL}  ||  CPU Usages : ${STATE_DISPLAY4} %"

    fi

}


#########################################################
# MEMORY USAGE AND CPU USAGE FOR INJECTOR 2             #
#########################################################

getINJECT2_MEMStatus() {

ping -c $RETRYCOUNT $SERV_INJEC2 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "-------------------------------------------------------------------------${JAUNE}INJECTOR 2${NORMAL}--------------------------------------------------------------------------"
        echo -e "${ROUGE}${SERV_INJEC2} is DOWN${NORMAL}"
    else

        #----------------------------------------------------------------------------
        #-------- INTERROGATION MEMORY USAGE / SWAP MACHINE INJECTEUR 2             -
        #----------------------------------------------------------------------------

        MEM_TOTAL1=$(ssh -q $SERV_INJEC2 grep 'MemTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE1=$(ssh -q $SERV_INJEC2 grep 'MemFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE_MB1=$(( ${MEM_FREE1%% *} / 1024))
        MEM_SWAP_TOTAL1=$(ssh -q $SERV_INJEC2 grep 'SwapTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_SWAP_FREE1=$(ssh -q $SERV_INJEC2 grep 'SwapFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_UPTIME1=$(ssh -q $SERV_INJEC2 uptime | awk -F" " '{print $3,$4}' | sed 's/\,//g')
        CPU_TOTAL1=$(ssh -q $SERV_INJEC2 cat /proc/cpuinfo | grep processor | wc -l)
        CPU_USAGE1=$(ssh -q $SERV_INJEC2 top -b -n2 -p 1 | fgrep "Cpu(s)" | tail -1 | awk -F'id,' -v prefix="$prefix" '{ split($1, vs, ","); v=vs[length(vs)]; sub("%", "", v); printf "%s%.1f%%\n", prefix, 100 - v }' | sed 's/\%//g')

        #------------------------------------------------------------
        #-------------- CALCUL % USAGE SWAP MEMORY      -------------
        #------------------------------------------------------------

        if (( $MEM_SWAP_TOTAL1 == 0))
            then
                MEM_SWAP_TOTAL1=1
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
            else
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
        fi

        #---------------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE RAM USAGE en Mb ----------
        #---------------------------------------------------------------------------

        if (( $MEM_FREE_MB1 > $MEM_LIMIT ))
        then
                STATE_DISPLAY1=${VERT}${MEM_FREE_MB1}${NORMAL}
        else
                STATE_DISPLAY1=${ROUGE}${MEM_FREE_MB1}${NORMAL}
        fi 

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE SWAP USAGE ---------
        #---------------------------------------------------------------------

        if (( $DELTA_FINAL1 > $MEM_SWAP_LIMIT ))
        then
                STATE_DISPLAY3=${VERT}${DELTA_FINAL1}${NORMAL}
        else
                STATE_DISPLAY3=${ROUGE}${DELTA_FINAL1}${NORMAL}
        fi

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE CPU USAGE ---------
        #---------------------------------------------------------------------

        if (( $CPU_USAGE1 < $CPU_USAG_LIMIT ))
        then
                STATE_DISPLAY4=${VERT}${CPU_USAGE1}${NORMAL}
        else
                STATE_DISPLAY4=${ROUGE}${CPU_USAGE1}${NORMAL}
        fi

        #------------------------------------------------------------------
        #-------- AFFICHAGE MEM_STATUS FOR INJECTEUR 2             --------
        #------------------------------------------------------------------

        echo -e "-------------------------------------------------------------------------${JAUNE}INJECTOR 2${NORMAL}--------------------------------------------------------------------------"
        echo -e "${CYAN}${SERV_INJEC2}${NORMAL}       : Uptime : ${VIOLET}${MEM_UPTIME1}${NORMAL}  ||  Memory Free: ${STATE_DISPLAY1} Mb  ||  Memory Total : ${BLUE}$(( ${MEM_TOTAL1%% *} / 1024 / 1024))${NORMAL} Gb  ||  Swap Free : ${STATE_DISPLAY3} %  || Number CPU : ${BLUE}${CPU_TOTAL1}${NORMAL}  ||  CPU Usages : ${STATE_DISPLAY4} %"
    
    fi

}


#################################################
# MEMORY USAGE AND CPU USAGE FOR CONSULTATION 1 #
#################################################

getCONSULT1_MEMStatus() {

ping -c $RETRYCOUNT $SERV_CONS1 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "-----------------------------------------------------------------------${JAUNE}CONSULTATION 1${NORMAL}------------------------------------------------------------------------"
        echo -e "${ROUGE}${SERV_CONS1} is DOWN${NORMAL}"
    else

        #----------------------------------------------------------------------------
        #-------- INTERROGATION MEMORY USAGE / SWAP MACHINE CONSULTATION 1          -
        #----------------------------------------------------------------------------

        MEM_TOTAL1=$(ssh -q $SERV_CONS1 grep 'MemTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE1=$(ssh -q $SERV_CONS1 grep 'MemFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE_MB1=$(( ${MEM_FREE1%% *} / 1024))
        MEM_SWAP_TOTAL1=$(ssh -q $SERV_CONS1 grep 'SwapTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_SWAP_FREE1=$(ssh -q $SERV_CONS1 grep 'SwapFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_UPTIME1=$(ssh -q $SERV_CONS1 uptime | awk -F" " '{print $3,$4}' | sed 's/\,//g')
        CPU_TOTAL1=$(ssh -q $SERV_CONS1 cat /proc/cpuinfo | grep processor | wc -l)
        CPU_USAGE1=$(ssh -q $SERV_CONS1 top -b -n2 -p 1 | fgrep "Cpu(s)" | tail -1 | awk -F'id,' -v prefix="$prefix" '{ split($1, vs, ","); v=vs[length(vs)]; sub("%", "", v); printf "%s%.1f%%\n", prefix, 100 - v }' | sed 's/\%//g')

        #------------------------------------------------------------
        #-------------- CALCUL % USAGE SWAP MEMORY      -------------
        #------------------------------------------------------------

        if (( $MEM_SWAP_TOTAL1 == 0))
            then
                MEM_SWAP_TOTAL1=1
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
            else
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
        fi

        #---------------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE RAM USAGE en Mb ----------
        #---------------------------------------------------------------------------

        if (( $MEM_FREE_MB1 > $MEM_LIMIT ))
        then
                STATE_DISPLAY1=${VERT}${MEM_FREE_MB1}${NORMAL}
        else
                STATE_DISPLAY1=${ROUGE}${MEM_FREE_MB1}${NORMAL}
        fi 

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE SWAP USAGE ---------
        #---------------------------------------------------------------------

        if (( $DELTA_FINAL1 > $MEM_SWAP_LIMIT ))
        then
                STATE_DISPLAY3=${VERT}${DELTA_FINAL1}${NORMAL}
        else
                STATE_DISPLAY3=${ROUGE}${DELTA_FINAL1}${NORMAL}
        fi

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE CPU USAGE ---------
        #---------------------------------------------------------------------

        if (( $CPU_USAGE1 < $CPU_USAG_LIMIT ))
        then
                STATE_DISPLAY4=${VERT}${CPU_USAGE1}${NORMAL}
        else
                STATE_DISPLAY4=${ROUGE}${CPU_USAGE1}${NORMAL}
        fi

        #------------------------------------------------------------------
        #-------- AFFICHAGE MEM_STATUS FOR CONSULTATION 1          --------
        #------------------------------------------------------------------

        echo -e "-----------------------------------------------------------------------${JAUNE}CONSULTATION 1${NORMAL}------------------------------------------------------------------------"
        echo -e "${CYAN}${SERV_CONS1}${NORMAL}       : Uptime : ${VIOLET}${MEM_UPTIME1}${NORMAL}  ||  Memory Free: ${STATE_DISPLAY1} Mb  ||  Memory Total : ${BLUE}$(( ${MEM_TOTAL1%% *} / 1024 / 1024))${NORMAL} Gb  ||  Swap Free : ${STATE_DISPLAY3} %  || Number CPU : ${BLUE}${CPU_TOTAL1}${NORMAL}  ||  CPU Usages : ${STATE_DISPLAY4} %"

    fi

}


#################################################
# MEMORY USAGE AND CPU USAGE FOR CONSULTATION 2 #
#################################################

getCONSULT2_MEMStatus() {

ping -c $RETRYCOUNT $SERV_CONS2 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "-----------------------------------------------------------------------${JAUNE}CONSULTATION 2${NORMAL}------------------------------------------------------------------------"
        echo -e "${ROUGE}${SERV_CONS2} is DOWN${NORMAL}"
    else

        #----------------------------------------------------------------------------
        #-------- INTERROGATION MEMORY USAGE / SWAP MACHINE CONSULTATION 2          -
        #----------------------------------------------------------------------------

        MEM_TOTAL1=$(ssh -q $SERV_CONS2 grep 'MemTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE1=$(ssh -q $SERV_CONS2 grep 'MemFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE_MB1=$(( ${MEM_FREE1%% *} / 1024))
        MEM_SWAP_TOTAL1=$(ssh -q $SERV_CONS2 grep 'SwapTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_SWAP_FREE1=$(ssh -q $SERV_CONS2 grep 'SwapFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_UPTIME1=$(ssh -q $SERV_CONS2 uptime | awk -F" " '{print $3,$4}' | sed 's/\,//g')
        CPU_TOTAL1=$(ssh -q $SERV_CONS2 cat /proc/cpuinfo | grep processor | wc -l)
        CPU_USAGE1=$(ssh -q $SERV_CONS2 top -b -n2 -p 1 | fgrep "Cpu(s)" | tail -1 | awk -F'id,' -v prefix="$prefix" '{ split($1, vs, ","); v=vs[length(vs)]; sub("%", "", v); printf "%s%.1f%%\n", prefix, 100 - v }' | sed 's/\%//g')

        #------------------------------------------------------------
        #-------------- CALCUL % USAGE SWAP MEMORY      -------------
        #------------------------------------------------------------

        if (( $MEM_SWAP_TOTAL1 == 0))
            then
                MEM_SWAP_TOTAL1=1
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
            else
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
        fi

        #---------------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE RAM USAGE en Mb ----------
        #---------------------------------------------------------------------------

        if (( $MEM_FREE_MB1 > $MEM_LIMIT ))
        then
                STATE_DISPLAY1=${VERT}${MEM_FREE_MB1}${NORMAL}
        else
                STATE_DISPLAY1=${ROUGE}${MEM_FREE_MB1}${NORMAL}
        fi 

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE SWAP USAGE ---------
        #---------------------------------------------------------------------

        if (( $DELTA_FINAL1 > $MEM_SWAP_LIMIT ))
        then
                STATE_DISPLAY3=${VERT}${DELTA_FINAL1}${NORMAL}
        else
                STATE_DISPLAY3=${ROUGE}${DELTA_FINAL1}${NORMAL}
        fi

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE CPU USAGE ---------
        #---------------------------------------------------------------------

        if (( $CPU_USAGE1 < $CPU_USAG_LIMIT ))
        then
                STATE_DISPLAY4=${VERT}${CPU_USAGE1}${NORMAL}
        else
                STATE_DISPLAY4=${ROUGE}${CPU_USAGE1}${NORMAL}
        fi

        #------------------------------------------------------------------
        #-------- AFFICHAGE MEM_STATUS FOR CONSULTATION 2          --------
        #------------------------------------------------------------------

        echo -e "-----------------------------------------------------------------------${JAUNE}CONSULTATION 2${NORMAL}------------------------------------------------------------------------"
        echo -e "${CYAN}${SERV_CONS2}${NORMAL}       : Uptime : ${VIOLET}${MEM_UPTIME1}${NORMAL}  ||  Memory Free: ${STATE_DISPLAY1} Mb  ||  Memory Total : ${BLUE}$(( ${MEM_TOTAL1%% *} / 1024 / 1024))${NORMAL} Gb  ||  Swap Free : ${STATE_DISPLAY3} %  || Number CPU : ${BLUE}${CPU_TOTAL1}${NORMAL}  ||  CPU Usages : ${STATE_DISPLAY4} %"

    fi

}


#################################################
# MEMORY USAGE AND CPU USAGE FOR CONSULTATION 3 #
#################################################

getCONSULT3_MEMStatus() {

ping -c $RETRYCOUNT $SERV_CONS3 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "-----------------------------------------------------------------------${JAUNE}CONSULTATION 3${NORMAL}------------------------------------------------------------------------"
        echo -e "${ROUGE}${SERV_CONS3} is DOWN${NORMAL}"
    else

        #----------------------------------------------------------------------------
        #-------- INTERROGATION MEMORY USAGE / SWAP MACHINE CONSULTATION 3          -
        #----------------------------------------------------------------------------

        MEM_TOTAL1=$(ssh -q $SERV_CONS3 grep 'MemTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE1=$(ssh -q $SERV_CONS3 grep 'MemFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE_MB1=$(( ${MEM_FREE1%% *} / 1024))
        MEM_SWAP_TOTAL1=$(ssh -q $SERV_CONS3 grep 'SwapTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_SWAP_FREE1=$(ssh -q $SERV_CONS3 grep 'SwapFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_UPTIME1=$(ssh -q $SERV_CONS3 uptime | awk -F" " '{print $3,$4}' | sed 's/\,//g')
        CPU_TOTAL1=$(ssh -q $SERV_CONS3 cat /proc/cpuinfo | grep processor | wc -l)
        CPU_USAGE1=$(ssh -q $SERV_CONS3 top -b -n2 -p 1 | fgrep "Cpu(s)" | tail -1 | awk -F'id,' -v prefix="$prefix" '{ split($1, vs, ","); v=vs[length(vs)]; sub("%", "", v); printf "%s%.1f%%\n", prefix, 100 - v }' | sed 's/\%//g')

        #------------------------------------------------------------
        #-------------- CALCUL % USAGE SWAP MEMORY      -------------
        #------------------------------------------------------------

        if (( $MEM_SWAP_TOTAL1 == 0))
            then
                MEM_SWAP_TOTAL1=1
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
            else
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
        fi

        #---------------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE RAM USAGE en Mb ----------
        #---------------------------------------------------------------------------

        if (( $MEM_FREE_MB1 > $MEM_LIMIT ))
        then
                STATE_DISPLAY1=${VERT}${MEM_FREE_MB1}${NORMAL}
        else
                STATE_DISPLAY1=${ROUGE}${MEM_FREE_MB1}${NORMAL}
        fi 

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE SWAP USAGE ---------
        #---------------------------------------------------------------------

        if (( $DELTA_FINAL1 > $MEM_SWAP_LIMIT ))
        then
                STATE_DISPLAY3=${VERT}${DELTA_FINAL1}${NORMAL}
        else
                STATE_DISPLAY3=${ROUGE}${DELTA_FINAL1}${NORMAL}
        fi

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE CPU USAGE ---------
        #---------------------------------------------------------------------

        if (( $CPU_USAGE1 < $CPU_USAG_LIMIT ))
        then
                STATE_DISPLAY4=${VERT}${CPU_USAGE1}${NORMAL}
        else
                STATE_DISPLAY4=${ROUGE}${CPU_USAGE1}${NORMAL}
        fi

        #------------------------------------------------------------------
        #-------- AFFICHAGE MEM_STATUS FOR CONSULTATION 3          --------
        #------------------------------------------------------------------

        echo -e "-----------------------------------------------------------------------${JAUNE}CONSULTATION 3${NORMAL}------------------------------------------------------------------------"
        echo -e "${CYAN}${SERV_CONS3}${NORMAL}       : Uptime : ${VIOLET}${MEM_UPTIME1}${NORMAL}  ||  Memory Free: ${STATE_DISPLAY1} Mb  ||  Memory Total : ${BLUE}$(( ${MEM_TOTAL1%% *} / 1024 / 1024))${NORMAL} Gb  ||  Swap Free : ${STATE_DISPLAY3} %  || Number CPU : ${BLUE}${CPU_TOTAL1}${NORMAL}  ||  CPU Usages : ${STATE_DISPLAY4} %"

    fi

}


#################################################
# MEMORY USAGE AND CPU USAGE FOR CONSULTATION 4 #
#################################################

getCONSULT4_MEMStatus() {

ping -c $RETRYCOUNT $SERV_CONS4 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "-----------------------------------------------------------------------${JAUNE}CONSULTATION 4${NORMAL}------------------------------------------------------------------------"
        echo -e "${ROUGE}${SERV_CONS4} is DOWN${NORMAL}"
    else

        #----------------------------------------------------------------------------
        #-------- INTERROGATION MEMORY USAGE / SWAP MACHINE CONSULTATION 4          -
        #----------------------------------------------------------------------------

        MEM_TOTAL1=$(ssh -q $SERV_CONS4 grep 'MemTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE1=$(ssh -q $SERV_CONS4 grep 'MemFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE_MB1=$(( ${MEM_FREE1%% *} / 1024))
        MEM_SWAP_TOTAL1=$(ssh -q $SERV_CONS4 grep 'SwapTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_SWAP_FREE1=$(ssh -q $SERV_CONS4 grep 'SwapFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_UPTIME1=$(ssh -q $SERV_CONS4 uptime | awk -F" " '{print $3,$4}' | sed 's/\,//g')
        CPU_TOTAL1=$(ssh -q $SERV_CONS4 cat /proc/cpuinfo | grep processor | wc -l)
        CPU_USAGE1=$(ssh -q $SERV_CONS4 top -b -n2 -p 1 | fgrep "Cpu(s)" | tail -1 | awk -F'id,' -v prefix="$prefix" '{ split($1, vs, ","); v=vs[length(vs)]; sub("%", "", v); printf "%s%.1f%%\n", prefix, 100 - v }' | sed 's/\%//g')

        #------------------------------------------------------------
        #-------------- CALCUL % USAGE SWAP MEMORY      -------------
        #------------------------------------------------------------

        if (( $MEM_SWAP_TOTAL1 == 0))
            then
                MEM_SWAP_TOTAL1=1
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
            else
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
        fi

        #---------------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE RAM USAGE en Mb ----------
        #---------------------------------------------------------------------------

        if (( $MEM_FREE_MB1 > $MEM_LIMIT ))
        then
                STATE_DISPLAY1=${VERT}${MEM_FREE_MB1}${NORMAL}
        else
                STATE_DISPLAY1=${ROUGE}${MEM_FREE_MB1}${NORMAL}
        fi 

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE SWAP USAGE ---------
        #---------------------------------------------------------------------

        if (( $DELTA_FINAL1 > $MEM_SWAP_LIMIT ))
        then
                STATE_DISPLAY3=${VERT}${DELTA_FINAL1}${NORMAL}
        else
                STATE_DISPLAY3=${ROUGE}${DELTA_FINAL1}${NORMAL}
        fi

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE CPU USAGE ---------
        #---------------------------------------------------------------------

        if (( $CPU_USAGE1 < $CPU_USAG_LIMIT ))
        then
                STATE_DISPLAY4=${VERT}${CPU_USAGE1}${NORMAL}
        else
                STATE_DISPLAY4=${ROUGE}${CPU_USAGE1}${NORMAL}
        fi

        #------------------------------------------------------------------
        #-------- AFFICHAGE MEM_STATUS FOR CONSULTATION 4          --------
        #------------------------------------------------------------------

        echo -e "-----------------------------------------------------------------------${JAUNE}CONSULTATION 4${NORMAL}------------------------------------------------------------------------"
        echo -e "${CYAN}${SERV_CONS4}${NORMAL}       : Uptime : ${VIOLET}${MEM_UPTIME1}${NORMAL}  ||  Memory Free: ${STATE_DISPLAY1} Mb  ||  Memory Total : ${BLUE}$(( ${MEM_TOTAL1%% *} / 1024 / 1024))${NORMAL} Gb  ||  Swap Free : ${STATE_DISPLAY3} %  || Number CPU : ${BLUE}${CPU_TOTAL1}${NORMAL}  ||  CPU Usages : ${STATE_DISPLAY4} %"

    fi

}


#################################################
# MEMORY USAGE AND CPU USAGE FOR ORACLE 1       #
#################################################

getORACLE1_MEMStatus() {

ping -c $RETRYCOUNT $SERV_ORACLE1 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "--------------------------------------------------------------------------${JAUNE}ORACLE 1${NORMAL}---------------------------------------------------------------------------"
        echo -e "${ROUGE}${SERV_ORACLE1} is DOWN${NORMAL}"
    else

        #----------------------------------------------------------------------------
        #-------- INTERROGATION MEMORY USAGE / SWAP MACHINE ORACLE 1                -
        #----------------------------------------------------------------------------

        MEM_TOTAL1=$(ssh -q $SERV_ORACLE1 grep 'MemTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE1=$(ssh -q $SERV_ORACLE1 grep 'MemFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE_MB1=$(( ${MEM_FREE1%% *} / 1024))
        MEM_SWAP_TOTAL1=$(ssh -q $SERV_ORACLE1 grep 'SwapTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_SWAP_FREE1=$(ssh -q $SERV_ORACLE1 grep 'SwapFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_UPTIME1=$(ssh -q $SERV_ORACLE1 uptime | awk -F" " '{print $3,$4}' | sed 's/\,//g')
        CPU_TOTAL1=$(ssh -q $SERV_ORACLE1 cat /proc/cpuinfo | grep processor | wc -l)
        CPU_USAGE1=$(ssh -q $SERV_ORACLE1 top -b -n2 -p 1 | fgrep "Cpu(s)" | tail -1 | awk -F'id,' -v prefix="$prefix" '{ split($1, vs, ","); v=vs[length(vs)]; sub("%", "", v); printf "%s%.1f%%\n", prefix, 100 - v }' | sed 's/\%//g')

        #------------------------------------------------------------
        #-------------- CALCUL % USAGE SWAP MEMORY      -------------
        #------------------------------------------------------------

        if (( $MEM_SWAP_TOTAL1 == 0))
            then
                MEM_SWAP_TOTAL1=1
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
            else
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
        fi

        #---------------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE RAM USAGE en Mb ----------
        #---------------------------------------------------------------------------

        if (( $MEM_FREE_MB1 > $MEM_LIMIT ))
        then
                STATE_DISPLAY1=${VERT}${MEM_FREE_MB1}${NORMAL}
        else
                STATE_DISPLAY1=${ROUGE}${MEM_FREE_MB1}${NORMAL}
        fi 

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE SWAP USAGE ---------
        #---------------------------------------------------------------------

        if (( $DELTA_FINAL1 > $MEM_SWAP_LIMIT ))
        then
                STATE_DISPLAY3=${VERT}${DELTA_FINAL1}${NORMAL}
        else
                STATE_DISPLAY3=${ROUGE}${DELTA_FINAL1}${NORMAL}
        fi

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE CPU USAGE ---------
        #---------------------------------------------------------------------

        if (( $CPU_USAGE1 < $CPU_USAG_LIMIT ))
        then
                STATE_DISPLAY4=${VERT}${CPU_USAGE1}${NORMAL}
        else
                STATE_DISPLAY4=${ROUGE}${CPU_USAGE1}${NORMAL}
        fi

        #------------------------------------------------------------------
        #-------- AFFICHAGE MEM_STATUS FOR ORACLE 1                --------
        #------------------------------------------------------------------

        echo -e "--------------------------------------------------------------------------${JAUNE}ORACLE 1${NORMAL}---------------------------------------------------------------------------"
        echo -e "${CYAN}${SERV_ORACLE1}${NORMAL}       : Uptime : ${VIOLET}${MEM_UPTIME1}${NORMAL}  ||  Memory Free: ${STATE_DISPLAY1} Mb  ||  Memory Total : ${BLUE}$(( ${MEM_TOTAL1%% *} / 1024 / 1024))${NORMAL} Gb  ||  Swap Free : ${STATE_DISPLAY3} %  || Number CPU : ${BLUE}${CPU_TOTAL1}${NORMAL}  ||  CPU Usages : ${STATE_DISPLAY4} %"

    fi

}


#################################################
# MEMORY USAGE AND CPU USAGE FOR ORACLE 2       #
#################################################

getORACLE2_MEMStatus() {

ping -c $RETRYCOUNT $SERV_ORACLE2 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "--------------------------------------------------------------------------${JAUNE}ORACLE 2${NORMAL}---------------------------------------------------------------------------"
        echo -e "${ROUGE}${SERV_ORACLE2} is DOWN${NORMAL}"
    else

        #----------------------------------------------------------------------------
        #-------- INTERROGATION MEMORY USAGE / SWAP MACHINE ORACLE 2                -
        #----------------------------------------------------------------------------

        MEM_TOTAL1=$(ssh -q $SERV_ORACLE2 grep 'MemTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE1=$(ssh -q $SERV_ORACLE2 grep 'MemFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_FREE_MB1=$(( ${MEM_FREE1%% *} / 1024))
        MEM_SWAP_TOTAL1=$(ssh -q $SERV_ORACLE2 grep 'SwapTotal' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_SWAP_FREE1=$(ssh -q $SERV_ORACLE2 grep 'SwapFree' /proc/meminfo | sed 's/[^0-9]*//g')
        MEM_UPTIME1=$(ssh -q $SERV_ORACLE2 uptime | awk -F" " '{print $3,$4}' | sed 's/\,//g')
        CPU_TOTAL1=$(ssh -q $SERV_ORACLE2 cat /proc/cpuinfo | grep processor | wc -l)
        CPU_USAGE1=$(ssh -q $SERV_ORACLE2 top -b -n2 -p 1 | fgrep "Cpu(s)" | tail -1 | awk -F'id,' -v prefix="$prefix" '{ split($1, vs, ","); v=vs[length(vs)]; sub("%", "", v); printf "%s%.1f%%\n", prefix, 100 - v }' | sed 's/\%//g')

        #------------------------------------------------------------
        #-------------- CALCUL % USAGE SWAP MEMORY      -------------
        #------------------------------------------------------------

        if (( $MEM_SWAP_TOTAL1 == 0))
            then
                MEM_SWAP_TOTAL1=1
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
            else
                DELTA_NUM1=$(($MEM_SWAP_FREE1 * 100))
                DELTA_FINAL1=$(($DELTA_NUM1 / MEM_SWAP_TOTAL1))
        fi

        #---------------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE RAM USAGE en Mb ----------
        #---------------------------------------------------------------------------

        if (( $MEM_FREE_MB1 > $MEM_LIMIT ))
        then
                STATE_DISPLAY1=${VERT}${MEM_FREE_MB1}${NORMAL}
        else
                STATE_DISPLAY1=${ROUGE}${MEM_FREE_MB1}${NORMAL}
        fi 

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE SWAP USAGE ---------
        #---------------------------------------------------------------------

        if (( $DELTA_FINAL1 > $MEM_SWAP_LIMIT ))
        then
                STATE_DISPLAY3=${VERT}${DELTA_FINAL1}${NORMAL}
        else
                STATE_DISPLAY3=${ROUGE}${DELTA_FINAL1}${NORMAL}
        fi

        #---------------------------------------------------------------------
        #-------------- DEFINITION DES REGLES D'AFFICHAGE CPU USAGE ---------
        #---------------------------------------------------------------------

        if (( $CPU_USAGE1 < $CPU_USAG_LIMIT ))
        then
                STATE_DISPLAY4=${VERT}${CPU_USAGE1}${NORMAL}
        else
                STATE_DISPLAY4=${ROUGE}${CPU_USAGE1}${NORMAL}
        fi

        #------------------------------------------------------------------
        #-------- AFFICHAGE MEM_STATUS FOR ORACLE 2                --------
        #------------------------------------------------------------------

        echo -e "--------------------------------------------------------------------------${JAUNE}ORACLE 2${NORMAL}---------------------------------------------------------------------------"
        echo -e "${CYAN}${SERV_ORACLE2}${NORMAL}       : Uptime : ${VIOLET}${MEM_UPTIME1}${NORMAL}  ||  Memory Free: ${STATE_DISPLAY1} Mb  ||  Memory Total : ${BLUE}$(( ${MEM_TOTAL1%% *} / 1024 / 1024))${NORMAL} Gb  ||  Swap Free : ${STATE_DISPLAY3} %  || Number CPU : ${BLUE}${CPU_TOTAL1}${NORMAL}  ||  CPU Usages : ${STATE_DISPLAY4} %"

    fi

}


#######################################
# RAPPORT MODULE DE REINDEXATION      #
#######################################

getMODULEINDEXStatus() {

ping -c $RETRYCOUNT $SERV_INDEX1 > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo -e "------------------------------${JAUNE}MODULE DE RATTRAPAGE${NORMAL}------------------------------------------"
        echo -e "${ROUGE}${SERV_INDEX1} is DOWN${NORMAL}"
    else
    
        ssh -q $SERV_INDEX1 ps -eo pid,user,command,args | grep rattrapage.jar | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
            ID1=$(ssh -q ${SERV_INDEX1} ps -eo pid,user,command,args | grep rattrapage.jar | grep -v grep | awk -F" " '{print $1}')
            DATE1=$(ssh -q $SERV_INDEX1 ps -eo pid,start | grep -w $ID1)
            RATTRAPAGE_STATUS=1
        fi
        
        ssh -q $SERV_INDEX1 ps -fu $APP_USER | grep rattrapage.jar | grep -v grep > /dev/null
        if [ $? -eq 0 ]; then
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "------------------------------${JAUNE}MODULE DE RATTRAPAGE${NORMAL}------------------------------------------"
                        echo -e "The Index Module is ${VERT}RUNNING${NORMAL}          ||        Linux Process & Start Date : ${VIOLET}${DATE1}${NORMAL}"
                fi
                RATTRAPAGE_STATUS=1
        else
                if [ "$PRINT_OUTPUT" == "1" ]; then
                        echo -e "------------------------------${JAUNE}MODULE DE RATTRAPAGE${NORMAL}------------------------------------------"
                        echo -e "The Index Module is ${ROUGE}DOWN${NORMAL}"
                fi
                RATTRAPAGE_STATUS=0
                
        fi
        
        FILE_EXIST=$(ssh -q ${SERV_INDEX1} "ls -A ${LOG_REPLAY} | grep rattrapage | wc -l")
        if (( $FILE_EXIST > 0)); then

                START_TIME=$(date +%s)
                NUM_DOCS_SOLR=$(curl -s "${URL_CONS}/solr/${COLL_SOLR}/select?q=*:*&wt=json" | egrep -o 'numFound[^,]*' | sed 's/[^0-9]*//g')
                NUM_DOCS_SOLR_D=$(echo "$NUM_DOCS_SOLR" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
                
                NUM_DOCS_PROC=$(ssh -q ${SERV_INDEX1} "cd $LOG_REPLAY;grep \"\[601\]\" rattrapage* " | awk -F" " '{print $9}')
                #NUM_DOCS_PROC=33445241
                NUM_DOCS_PROC_D=$(echo "$NUM_DOCS_PROC" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
                
                NUM_DOCS_TRT=$(ssh -q ${SERV_INDEX1} "cd $LOG_REPLAY;grep \"\[604\]\" rattrapage* | wc -l")
                NUM_DOCS_TRT_D=$(echo "$NUM_DOCS_TRT" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
                
                NUM_DOCS_INDX=$(ssh -q ${SERV_INDEX1} "cd $LOG_REPLAY;grep \"\[609\]\" rattrapage* | wc -l")
                NUM_DOCS_INDX_FAIL=$(ssh -q ${SERV_INDEX1} "cd $LOG_REPLAY;grep \"\[608\]\" rattrapage* | wc -l")
                
                LOG_SIZE=$(ssh -q ${SERV_INDEX1} "cd $LOG_REPLAY;du -sh")
                FS_USED=$(ssh -q ${SERV_INDEX1} df -h $LOG_REPLAY | awk 'NR>=3 {print $4}' | sed 's/[^0-9]//g')
                
                #LIST_DOCS_PER_DAY=$(ssh -q ${SERV_INDEX1} "cd $LOG_REPLAY;grep \"\[603\]\" rattrapage* " |  awk -F" " '{print $7,$8,$9,$10,$11,$12,$13,$14,$15}')
                PROG_PERIOD=$(ssh -q ${SERV_INDEX1} "cd $LOG_REPLAY;grep \"\[600\]\" rattrapage* "|  awk -F" " '{print $12,$13,$14,$15}')
                #PROG_PERIOD=\[01\-04\-2015\ \-\ 30\-06\-2015\]
                PROG_FINISH=$(ssh -q ${SERV_INDEX1} "cd $LOG_REPLAY;grep \"\[611\]\" rattrapage.log "| tail -1 | awk -F" " '{print $14}')
                
                
                #----------------------------------------------------
                # Calcul percentage of completion Global
                #----------------------------------------------------
                
                NUM_DOCS_SOLR2=$((NUM_DOCS_SOLR))
                LEFT_TO_DO=$(($NUM_DOCS_SOLR2 - $NUM_DOCS_TRT))
                PERC_OF_COMP_TMP=$( echo "scale=4 ; ($NUM_DOCS_TRT / $NUM_DOCS_SOLR2)" | bc)
                PERC_OF_COMP=$(($PERC_OF_COMP_TMP * 100))
                
                #----------------------------------------------------
                # Calcul percentage of Treatment Ongoing
                #----------------------------------------------------
                
                NUM_DOCS_PROC2=$((NUM_DOCS_PROC))
                LEFT_TO_DO2=$(($NUM_DOCS_PROC2 - $NUM_DOCS_TRT))
                PERC_OF_COMP_TMP2=$( echo "scale=4 ; ($NUM_DOCS_TRT / $NUM_DOCS_PROC2)" | bc)
                PERC_OF_COMP2=$(($PERC_OF_COMP_TMP2 * 100))
                
                #END_TIME=`echo $(($(date +%s%N)/1000000))`
                END_TIME=$(date +%s)
                ELAPSED_TIME=$(($END_TIME - $START_TIME))
                
                #---------------------------------------------------
                # Test if the programme is finish
                #---------------------------------------------------
                
                if [ "$PROG_FINISH" == "" ]
                    then
                        DISPLAY_1=${ROUGE}"THE PROGRAM IS NOT FINISH"${NORMAL}
                    else
                        PROG_HOUR=$(echo "scale=4 ; (${PROG_FINISH} / 3600)" | bc)
                        PROG_DAYS=$(echo "scale=4 ; ($PROG_HOUR / 24)" | bc)
                        DISPLAY_1=${JAUNE}"${PROG_DAYS} Days"${NORMAL}
                fi
        else
                START_TIME=$(date +%s)
                NUM_DOCS_SOLR=0
                NUM_DOCS_SOLR_D=$(echo "$NUM_DOCS_SOLR" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')

                NUM_DOCS_PROC=0
                NUM_DOCS_PROC_D=$(echo "$NUM_DOCS_PROC" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
                NUM_DOCS_TRT=0
                NUM_DOCS_TRT_D=$(echo "$NUM_DOCS_TRT" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')


                NUM_DOCS_INDX=0
                NUM_DOCS_INDX_FAIL=0
                
                LOG_SIZE=$(ssh -q ${SERV_INDEX1} "cd $LOG_REPLAY;du -sh")
                FS_USED=$(ssh -q ${SERV_INDEX1} df -h $LOG_REPLAY | awk 'NR>=3 {print $4}' | sed 's/[^0-9]//g')

                PROG_PERIOD=0
                PROG_FINISH=0

                #----------------------------------------------------
                # Calcul percentage of completion Global
                #----------------------------------------------------
                
                NUM_DOCS_SOLR2=$((NUM_DOCS_SOLR))
                LEFT_TO_DO=$(($NUM_DOCS_SOLR2 - $NUM_DOCS_TRT))
                PERC_OF_COMP_TMP=0
                PERC_OF_COMP=0
                
                #----------------------------------------------------
                # Calcul percentage of Treatment Ongoing
                #----------------------------------------------------

                NUM_DOCS_PROC2=$((NUM_DOCS_PROC))
                LEFT_TO_DO2=$(($NUM_DOCS_PROC2 - $NUM_DOCS_TRT))
                PERC_OF_COMP_TMP2=0
                PERC_OF_COMP2=0
                
                #END_TIME=`echo $(($(date +%s%N)/1000000))`
                END_TIME=$(date +%s)
                ELAPSED_TIME=$(($END_TIME - $START_TIME))
                
                #---------------------------------------------------
                # Test if the programme is finish
                #---------------------------------------------------


#                 if [ "$PROG_FINISH" == "" ]
#                     then
#                         DISPLAY_1=${ROUGE}"THE PROGRAM IS NOT FINISH"${NORMAL}
#                     else
#                         PROG_HOUR=$(echo "scale=4 ; (${PROG_FINISH} / 3600)" | bc)
#                         PROG_DAYS=$(echo "scale=4 ; ($PROG_HOUR / 24)" | bc)
#                         DISPLAY_1=${JAUNE}${PROG_DAYS}${NORMAL}
#                 fi
        fi

        #-------------------------------------------------------------------------------------------
        # Affichage Resultat
        #-------------------------------------------------------------------------------------------
        
        echo ""
        echo -e "Global Number of Document need to be Test     : ${VERT}${NUM_DOCS_SOLR_D}${NORMAL}"
        echo ""
        echo -e "Total Number of Document need to be Test      : ${VERT}${NUM_DOCS_PROC_D}${NORMAL}"
        echo -e "Number of Document Already Processes          : ${VERT}${NUM_DOCS_TRT_D}${NORMAL}"
        echo ""
        echo -e "Number of Document Reindexes                  : ${JAUNE}${NUM_DOCS_INDX}${NORMAL}"
        echo -e "Number of Document Indexes Error              : ${ROUGE}${NUM_DOCS_INDX_FAIL}${NORMAL}"
        echo ""
        echo -e "Status of the Treatment on the Global         : ${VERT}${PERC_OF_COMP}${NORMAL}%"
        echo -e "Progress on Treatment Ongoing                 : ${VERT}${PERC_OF_COMP2}${NORMAL}%"
        echo ""
        echo -e "Periods Analyzed                              : ${JAUNE}${PROG_PERIOD}${NORMAL}"
        echo ""
        echo -e "Program is finish in                          : ${DISPLAY_1}"
        echo -e "LOG SIZE                                      : ${JAUNE}${LOG_SIZE}${NORMAL}"
        echo -e "FS_USED                                       : ${JAUNE}${FS_USED}${NORMAL}%"
        echo ""
        echo ""
        echo "--------------------------------------------------------------------------------------------"
        echo -e "                      The Monitoring take ${ROUGE}${ELAPSED_TIME}${NORMAL}S to be displayed"
        echo "--------------------------------------------------------------------------------------------"
        
    fi

}


###################################
# Methodes generales              #
###################################

printUsage() {
        echo -e "${BLUE}           ___      .______        ______  _______  __       _______        ${NORMAL}"
        echo -e "${BLUE}          /   \     |   _  \      /      ||   ____||  |     |   ____|       ${NORMAL}"
        echo -e "${BLUE}         /  ^  \    |  |_)  |    |   ---- |  |__   |  |     |  |__          ${NORMAL}"
        echo -e "${BLUE}        /  /_\  \   |      /     |  |     |   __|  |  |     |   __|         ${NORMAL}"
        echo -e "${BLUE}       /  _____  \  |  |\  \----.|   ----.|  |____ |   ----.|  |____        ${NORMAL}"
        echo -e "${BLUE}      /__/     \__\ | _|  ._____| \______||_______||_______||_______|       ${NORMAL}"
        echo -e "${BLUE}       _______.___________.    ___   .___________. __    __       _______.  ${NORMAL}"
        echo -e "${BLUE}      /       |           |   /   \  |           ||  |  |  |     /       |  ${NORMAL}"
        echo -e "${BLUE}     |   (---- ---|  |----   /  ^  \  ---|  |---- |  |  |  |    |   (----   ${NORMAL}"
        echo -e "${BLUE}      \   \       |  |      /  /_\  \    |  |     |  |  |  |     \   \      ${NORMAL}"
        echo -e "${BLUE}  .----)   |      |  |     /  _____  \   |  |     |   --   | .----)   |     ${NORMAL}"
        echo -e "${BLUE}  |_______/       |__|    /__/     \__\  |__|      \______/  |_______/      ${NORMAL}"
        echo -e "                                                           by exparc  ${JAUNE}v${VERSION_PROG}${NORMAL} "
        echo "==========================================================================" 
        echo -e "                    SCRIPT DE CONTROLE EAAS ${ROUGE}${ENV_PROG}${NORMAL}"
        echo "==========================================================================" 
        echo "Utilisation:"
        echo ""
        echo Commandes disponibles:
        echo =====================
        echo -e $0 "run_all                : Execute tous les Menus ci-dessous"
        echo -e $0 "pid_status_all         : Donne les status des composants Linux pris en charge"
        echo -e $0 "pid_status_indexers    : Donne les status pour les indexers, module replay, module de reindexation seulement"
        echo -e $0 "pid_status_zookeepers  : Donne les status pour les zookeeper seulement"
        echo -e $0 "pid_status_injectors   : Donne les status des EJB d'injection ARCELE"
        echo -e $0 "pid_status_consult     : Donne les status des JVM de la Consultation ARCELE"
        echo -e $0 "pid_status_oracle      : Donne les status du cluster ORACLE"
        echo -e $0 "pid_status_websphere   : Donne les status des nodes agents et DMGR WEBSPHERE"
        echo -e $0 "filesystem_all         : Donne l'etat des FS pour tous les composants (ALERTE > a ${VERT}${FS_LIMIT}%${NORMAL})"
        echo -e $0 "filesystem_solr        : Donne l'etat des FS pour solr (ALERTE > a ${VERT}${FS_LIMIT}%${NORMAL})"
        echo -e $0 "filesystem_inj         : Donne l'etat des FS pour les Injecteurs (ALERTE > a ${VERT}${FS_LIMIT}%${NORMAL})"
        echo -e $0 "filesystem_cons        : Donne l'etat des FS pour les Consultations (ALERTE > a ${VERT}${FS_LIMIT}%${NORMAL})"
        echo -e $0 "filesystem_indx        : Donne l'etat des FS pour des Indexers & Zookeepers (ALERTE > a ${VERT}${FS_LIMIT}%${NORMAL})"
        echo -e $0 "report_injection       : Donne le nombre d'injections sur la journee en cours"
        echo -e $0 "report_injection_histo : Donne le nombre d'injections sur les trois derniers jours"
        echo -e $0 "report_injection_perf  : Donne la vitesse d'injections des injecteurs (On ${CYAN}${SERV_INJEC1}${NORMAL} : ${VERT}${EJB1_SERVINJECT1}${NORMAL},${VERT}${EJB2_SERVINJECT1}${NORMAL} / On ${CYAN}${SERV_INJEC2}${NORMAL} : ${VERT}${EJB1_SERVINJECT2}${NORMAL},${VERT}${EJB2_SERVINJECT2}${NORMAL})"
        echo -e $0 "report_consultation    : Donne le nombre de consultations sur la journee en cours"
        echo -e $0 "mq_status_ele          : Donne l'etat des files MQ ELE On (${CYAN}${SERV_INJEC1}${NORMAL} / ${CYAN}${SERV_INJEC2}${NORMAL})(ALERTE Nombres Messages < a ${VERT}${MQ_CUR_LIMIT_ELE}${NORMAL})"
        echo -e $0 "mem_status             : Donne l'etat de la memoire (ALERTE memoire libre < a ${VERT}${MEM_LIMIT} Mb${NORMAL} & memoire swap < ${VERT}${MEM_SWAP_LIMIT}%${NORMAL})"
        echo -e $0 "mem_status_ind_zoo     : Donne l'etat de la memoire des INDEXER & ZOOKEEPER (ALERTE memoire libre < a ${VERT}${MEM_LIMIT} Mb${NORMAL} & memoire swap < ${VERT}${MEM_SWAP_LIMIT}%${NORMAL})"
        echo -e $0 "mem_status_consult     : Donne l'etat de la memoire des CONSULTATIONS (ALERTE memoire libre < a ${VERT}${MEM_LIMIT} Mb${NORMAL} & memoire swap < ${VERT}${MEM_SWAP_LIMIT}%${NORMAL})"
        echo -e $0 "mem_status_inject      : Donne l'etat de la memoire des INJECTEURS (ALERTE memoire libre < a ${VERT}${MEM_LIMIT} Mb${NORMAL} & memoire swap < ${VERT}${MEM_SWAP_LIMIT}%${NORMAL})"
        echo -e $0 "mem_status_oracle      : Donne l'etat de la memoire des ORACLES (ALERTE memoire libre < a ${VERT}${MEM_LIMIT} Mb${NORMAL} & memoire swap < ${VERT}${MEM_SWAP_LIMIT}%${NORMAL})"
        echo -e $0 "module_index_work      : Donne l'etat d'avancement du module de rattrapage des indexes"
        echo ""
}


if [ "$1" == "pid_status_all" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                   ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINDEXER1Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINDEXER2Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECTOR1Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getMQ_INJECTOR1Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECTOR2Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getMQ_INJECTOR2Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getORACLEStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT1Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT2Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT3Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT4Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getWEBSPHERE_SOLRStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getWEBSPHERE_CONSULTStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getWEBSPHERE_INJECTStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "pid_status_indexers" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                   ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINDEXER1Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINDEXER2Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "pid_status_injectors" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "============================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                   ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "============================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECTOR1Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getMQ_INJECTOR1Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECTOR2Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getMQ_INJECTOR2Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "============================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "pid_status_consult" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "============================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                   ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "============================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT1Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT2Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT3Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT4Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "============================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "pid_status_oracle" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "============================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                   ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "============================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getORACLEStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "============================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "pid_status_websphere" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "============================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                   ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "============================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getWEBSPHERE_SOLRStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getWEBSPHERE_CONSULTStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getWEBSPHERE_INJECTStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "============================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "filesystem_all" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                   ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECT1_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECT2_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECT_MAF1_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECT_MAF2_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONS1_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONS2_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONS3_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONS4_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINDX1_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINDX2_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "filesystem_inj" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                   ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECT1_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECT2_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "filesystem_cons" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                   ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONS1_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONS2_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONS3_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONS4_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "filesystem_indx" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                   ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINDX1_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINDX2_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "report_injection" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                   ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getREPORT_InjectStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "report_injection_histo" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "===============================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                                       ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===============================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getREPORT_HISTO_InjectStatus
        reset
        echo "===============================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                                       ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===============================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getREPORT_HISTO_Display
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===============================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "report_injection_perf" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "====================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "              ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "====================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getREPORT_PERF_InjectStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "====================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "report_consultation" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "=================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                           ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "=================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getREPORT_ConsultStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "=================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "mq_status_ele" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "======================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                     ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "======================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getREPORT_ELE_MqStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "======================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "mem_status" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "=============================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                                                 ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "=============================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getIND1_ZOO2_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getIND2_ZOO1_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECT1_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECT2_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT1_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT2_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT3_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT4_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getORACLE1_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getORACLE2_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "=============================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "mem_status_ind_zoo" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "=============================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                                                 ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "=============================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getIND1_ZOO2_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getIND2_ZOO1_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "============================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "mem_status_consult" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "=============================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                                                 ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "=============================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT1_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT2_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT3_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT4_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "=============================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "mem_status_inject" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "=============================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                                                 ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "=============================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECT1_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECT2_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "=============================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "mem_status_oracle" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "=============================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                                                 ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "=============================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getORACLE1_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getORACLE2_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "=============================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "module_index_work" ];then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "============================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                   ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "============================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getMODULEINDEXStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "============================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
elif [ "$1" == "run_all" ]; then
        checkUser $USER_PROGRAM
        PRINT_OUTPUT=1
        echo "                                  =======================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                                                             ${ROUGE}RAPPORT COMPLET${NORMAL}                                   " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "                                  =======================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "======================================================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                                                           ${BLUE}${FULL_DATE}${NORMAL} " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "======================================================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                                                              ${JAUNE}PID_STATUS_ALL${NORMAL}                                                                         " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2        
        echo "======================================================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2        
        getINDEXER1Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINDEXER2Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECTOR1Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getMQ_INJECTOR1Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECTOR2Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getMQ_INJECTOR2Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getORACLEStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT1Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT2Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT3Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT4Status | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "===========================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getWEBSPHERE_SOLRStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getWEBSPHERE_CONSULTStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getWEBSPHERE_INJECTStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "======================================================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2        
        echo -e "                                                                              ${JAUNE}FILE_SYSTEM_ALL${NORMAL}                                                                         " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2        
        echo "======================================================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2        
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECT1_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECT2_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONS1_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONS2_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONS3_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONS4_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINDX1_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINDX2_FileSystem | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "======================================================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2        
        echo -e "                                                                              ${JAUNE}HISTORIQUE_INJECTION${NORMAL}                                                                   " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2        
        echo "======================================================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2        
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getREPORT_HISTO_InjectStatus
        getREPORT_HISTO_Display
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "======================================================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2        
        echo -e "                                                                              ${JAUNE}REPORT_CONSULTATION${NORMAL}                                                                   " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2        
        echo "======================================================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2        
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getREPORT_ConsultStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "======================================================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2        
        echo -e "                                                                              ${JAUNE}MQ_STATUS${NORMAL}                                                                   " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2        
        echo "======================================================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2        
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getREPORT_ELE_MqStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "======================================================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2        
        echo -e "                                                                              ${JAUNE}MEM_STATUS${NORMAL}                                                                   " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2        
        echo "======================================================================================================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getIND1_ZOO2_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getIND2_ZOO1_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECT1_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getINJECT2_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT1_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT2_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT3_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getCONSULT4_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getORACLE1_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        getORACLE2_MEMStatus | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2     
        echo "" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "                                  =======================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo -e "                                                                             ${ROUGE}RAPPORT TERMINE${NORMAL}                                   " | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        echo "                                  =======================================================================================================" | tee -a $LOG_DIR/${USER_PROGRAM}_STATUS_$LOG_DATE.log 1>&2
        
else

checkUser $USER_PROGRAM
printUsage

fi
